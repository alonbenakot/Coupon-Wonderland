{"version":3,"sources":["reportWebVitals.ts","Components/AuthArea/AuthBigBoys/AuthBigBoys.tsx","Redux/AuthState.ts","Components/LayoutArea/Footer/Footer.tsx","Redux/CompanyState.ts","Redux/CouponsState.ts","Redux/CustomersState.ts","Redux/Store.ts","Components/AuthArea/AuthCustomer/AuthCustomer.tsx","Services/Notifications.ts","Components/DisplayArea/MyArea/MyArea.tsx","Models/UserModel.ts","Components/LayoutArea/Header/Header.tsx","Services/Globals.ts","Components/AuthArea/Login/Login.tsx","Components/AuthArea/Logout/Logout.tsx","Components/CouponsArea/CouponCard/CouponCard.tsx","Components/CouponsArea/CategoryCoupons/CategoryCoupons.tsx","Services/jwtAxios.ts","Components/CouponsArea/FullCouponDetails/FullCouponDetails.tsx","Components/DisplayArea/Admin/AddCompany/AddCompany.tsx","Components/DisplayArea/Admin/AddCustomer/AddCustomer.tsx","Components/DisplayArea/OperationCard/OperationCard.tsx","Components/DisplayArea/Admin/AdminDisplay/AdminDisplay.tsx","Components/DisplayArea/Admin/CompanyCard/CompanyCard.tsx","Components/DisplayArea/Admin/DeleteCompany/DeleteCompany.tsx","Components/DisplayArea/Admin/CustomerCard/CustomerCard.tsx","Components/DisplayArea/Admin/DeleteCustomer/DeleteCustomer.tsx","Components/DisplayArea/Admin/UpdateCompany/UpdateCompany.tsx","Components/DisplayArea/Admin/UpdateCompanyForm/UpdateCompanyForm.tsx","Components/DisplayArea/Admin/UpdateCustomer/UpdateCustomer.tsx","Components/DisplayArea/Admin/UpdateCustomerForm/UpdateCustomerForm.tsx","Models/CouponModel.ts","Components/DisplayArea/Company/AddCoupon/AddCoupon.tsx","Components/DisplayArea/Company/CompanyDisplay/CompanyDisplay.tsx","Components/DisplayArea/Company/UpdateCouponForm/UpdateCouponForm.tsx","Components/DisplayArea/Customer/CustomerDisplay/CustomerDisplay.tsx","Components/SharedArea/Page404/Page404.tsx","Components/CouponsArea/CategoryCard/CategoryCard.tsx","Components/LayoutArea/Home/Home.tsx","Components/LayoutArea/Routing/Routing.tsx","Components/LayoutArea/Layout/Layout.tsx","index.tsx"],"names":["reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","AuthBigBoys","AuthActionType","className","to","Footer","Typography","variant","Component","AuthState","user","storedUser","JSON","parse","localStorage","getItem","this","loginAction","type","Login","payload","CompaniesActionType","CompaniesState","companies","companiesDownloadedAction","CompanyDownloaded","companyUpdatedAction","company","CompanyUpdated","companyDeletedAction","CompanyDeleted","companyAddedAction","CompanyAdded","CouponsActionType","CouponsState","coupons","couponsDowloadedAction","CouponDownloaded","couponUpdatedAction","coupon","CouponUpdated","couponDeletedAction","CouponDeleted","couponAddedAction","CouponAdded","CustomersActionType","CustomersState","customers","customersDownloadedAction","CustomersDownloaded","customerUpdatedAction","customer","CustomerUpdated","customerDeletedAction","CustomerDeleted","customerAddedAction","CustomerAdded","reducers","combineReducers","couponState","index","currentState","action","newState","includes","push","findIndex","element","id","splice","authState","setItem","stringify","Logout","removeItem","companyState","customerState","store","createStore","AuthCustomer","useState","getState","setUser","useEffect","unSubscribeMe","subscribe","name","notify","notification","Notyf","duration","position","x","y","dismissible","types","background","message","success","err","extractMessage","error","response","data","Array","isArray","MyArea","ClientType","history","useHistory","Button","onClick","clientType","toLowerCase","startIcon","AccountBox","style","textTransform","color","Header","Globals","globals","myUrl","urls","categoryCoupons","login","guestAddCustomer","addCompany","getCompanies","deleteCompanies","updateCompany","addCustomer","getCustomers","updateCustomer","deleteCustomer","getCompanyCoupons","addCoupon","deleteCoupon","updateCoupon","purchaseCoupon","getCustomerDetails","getCustomerCoupons","useStyles","makeStyles","root","right","top","backgroundColor","props","classes","useForm","register","handleSubmit","passwordShown","setPasswordShown","credentials","a","credentialsUrl","email","password","ADMINISTRATOR","COMPANY","CUSTOMER","axios","post","dispatch","toString","typeName","words","charAt","toUpperCase","slice","replace","split","i","length","substr","join","niceString","onSubmit","FormControl","InputLabel","Input","required","IconButton","ButtonGroup","LockOpen","ArrowBack","theme","createStyles","cardStyle","width","media","height","paddingTop","title","maxWidth","fontSize","marginBottom","paddingBottom","description","marginTop","content","textAlign","buttons","justifyContent","CouponCard","location","useLocation","show","amount","cust","find","c","undefined","showCoupon","Card","imageName","CardMedia","image","CardHeader","CardContent","dateMilli","d","Date","taskDate","endDate","price","pathname","CardActions","handleD","handleU","CategoryCoupons","state","category","match","params","get","forEach","coup","setState","console","log","categoryName","filter","map","jwtAxios","create","interceptors","request","use","headers","token","minWidth","FullCouponDetails","setCoupon","put","storageCoupon","subheader","startDate","answer","showAmount","currentUser","toShowOrNotToShow","goBack","left","AddCompany","addedCompany","inputProps","minLength","maxLength","FormHelperText","Add","AddCustomer","addedCustomer","firstName","lastName","OperationCard","operation","AdminDisplay","compsAndCustsFetched","setCompsAndCustsFetched","CompanyCard","handle","children","DeleteCompany","setCompanies","handleDelete","delete","Delete","CustomerCard","DeleteCustomer","setCustomers","customerToDelete","UpdateCompany","goToForm","comp","Build","UpdateCompanyForm","parseInt","setCompany","checkIfChanged","companyToUpdate","handleUpdate","updatedCompany","storageCompany","defaultValue","UpdateCustomer","UpdateCustomerForm","Category","setCustomer","customerToUpdate","updatedCustomer","storageCustomer","CouponModel","form","margin","spacing","AddCoupon","value","setValue","imgBBFormData","FormData","append","item","set","imgResponse","imgURL","myFormData","toISOString","addedCoupon","setTimeout","encType","Select","labelId","onChange","event","target","MenuItem","FOOD","ELECTRICITY","RESTAURANT","VACATION","HYGIENE_PRODUCTS","TRANSPORT","MAGIC","shrink","fullWidth","min","step","component","hidden","accept","CompanyDisplay","setCoupons","couponsFetched","setCouponsFetched","categoryValue","setCategoryValue","priceValue","setPriceValue","details","setDetails","goToUpdateForm","couponsDownloadedAction","getCoupons","size","filteredCoupons","maxPrice","showCoupons","UpdateCouponForm","couponToUpdate","trim","valiDates","updatedCoupon","CustomerDisplay","customerFetched","setCustomerFetched","getCustomer","display","Page404","CategoryCard","Home","Power","Kitchen","Bathtub","BlurOn","Fastfood","Commute","CardTravel","Routing","path","exact","render","from","Layout","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.42725a1f.chunk.js","sourcesContent":["import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { NavLink } from \"react-router-dom\";\nimport \"./AuthBigBoys.css\";\n\n/**\n * Allows logging in as an admin or a company.\n * \n */\nfunction AuthBigBoys(): JSX.Element {\n    return (\n        <div className=\"AuthBigBoys\">\n           <span> Log in as&nbsp;</span> \n\t\t\t<NavLink to=\"/login/admin\">Admin</NavLink>\n            &nbsp; | &nbsp;\n\t\t\t<NavLink to=\"/login/company\">Company</NavLink> \n        </div>\n    );\n}\n\nexport default AuthBigBoys;\n","import UserModel from \"../Models/UserModel\";\r\n\r\nexport class AuthState {\r\n    public user: UserModel = null;\r\n    public constructor() {\r\n        let storedUser = JSON.parse(localStorage.getItem(\"user\"));\r\n        if (storedUser) {\r\n            this.user = storedUser;\r\n        }\r\n    }\r\n}\r\n\r\nexport enum AuthActionType {\r\n    Login = \"Login\",\r\n    Logout = \"Logout\"\r\n}\r\n\r\nexport interface AuthAction {\r\n    type: AuthActionType;\r\n    payload?: any;\r\n}\r\n\r\nexport function loginAction(user: UserModel): AuthAction {\r\n    return {type: AuthActionType.Login, payload: user};\r\n}\r\nexport function logoutAction(): AuthAction {\r\n    return {type: AuthActionType.Logout};\r\n}\r\n\r\nexport function authReducer(currentState: AuthState = new AuthState(), action: AuthAction) : AuthState {\r\n    const newState = {...currentState};\r\n\r\n    switch (action.type) {\r\n        case AuthActionType.Login:\r\n            newState.user = action.payload;\r\n            localStorage.setItem(\"user\", JSON.stringify(newState.user));\r\n            break;\r\n        case AuthActionType.Logout:\r\n            newState.user = null;\r\n            localStorage.removeItem(\"user\");\r\n            break;\r\n    }\r\n    return newState;\r\n}","import { Typography } from \"@material-ui/core\";\nimport { Component } from \"react\";\nimport AuthBigBoys from \"../../AuthArea/AuthBigBoys/AuthBigBoys\";\nimport \"./Footer.css\";\n\nclass Footer extends Component {\n\n    public render(): JSX.Element {\n        return (\n            <div className=\"Footer\">\n                <Typography variant=\"h5\"> &copy; Alon Benakot 2021 </Typography>\n                <span>\n                    <AuthBigBoys/>\n                </span>\n            </div>\n        );\n    }\n}\n\nexport default Footer;\n","import CompanyModel from \"../Models/CompanyModel\";\r\n\r\nexport class CompaniesState {\r\n    public companies: CompanyModel[] = [];\r\n}\r\n\r\nexport enum CompaniesActionType {\r\n    CompanyAdded = \"CompanyAdded\",\r\n    CompanyUpdated = \"CompanyUpdated\",\r\n    CompanyDeleted = \"CompanyDeleted\",\r\n    CompanyDownloaded = \"CompanyDownloaded\"\r\n}\r\n\r\nexport interface CompanyAction {\r\n    type: CompaniesActionType;\r\n    payload: any;\r\n}\r\n\r\nexport function companiesDownloadedAction(companies: CompanyModel[]): CompanyAction {\r\n    return { type: CompaniesActionType.CompanyDownloaded, payload: companies }\r\n}\r\n\r\nexport function companyUpdatedAction(company: CompanyModel): CompanyAction {\r\n    return { type: CompaniesActionType.CompanyUpdated, payload: company }\r\n}\r\n\r\nexport function companyDeletedAction(company: CompanyModel): CompanyAction {\r\n    return { type: CompaniesActionType.CompanyDeleted, payload: company }\r\n}\r\n\r\nexport function companyAddedAction(company: CompanyModel): CompanyAction {\r\n    return { type: CompaniesActionType.CompanyAdded, payload: company }\r\n}\r\n\r\nexport function companiesReducer(currentState: CompaniesState = new CompaniesState(), action: CompanyAction): CompaniesState {\r\n    let newState = { ...currentState };\r\n    let index;\r\n\r\n    switch (action.type) {\r\n        case CompaniesActionType.CompanyDownloaded:\r\n            newState.companies = action.payload;\r\n            break;\r\n        case CompaniesActionType.CompanyAdded:\r\n            newState.companies.push(action.payload);\r\n            break;\r\n        case CompaniesActionType.CompanyDeleted:\r\n            index = newState.companies.findIndex(element => element.id === action.payload.id);\r\n            newState.companies.splice(index, 1);\r\n            break;\r\n        case CompaniesActionType.CompanyUpdated:\r\n            index = newState.companies.findIndex(element => element.id === action.payload.id);\r\n            newState.companies[index] = action.payload;\r\n            break;\r\n        \r\n    }\r\n    return newState;\r\n}\r\n","// import { CouponAction, CouponsActionType } from './CouponsState';\r\nimport CouponModel from \"../Models/CouponModel\";\r\n\r\nexport class CouponsState {\r\n    public coupons: CouponModel[] = [];\r\n}\r\n\r\nexport enum CouponsActionType {\r\n    CouponAdded = \"CouponAdded\",\r\n    CouponUpdated = \"CouponUpdated\",\r\n    CouponDeleted = \"CouponDeleted\",\r\n    CouponDownloaded = \"CouponDownloaded\"\r\n}\r\n\r\nexport interface CouponAction {\r\n    type: CouponsActionType;\r\n    payload: any;\r\n}\r\n\r\nexport function couponsDowloadedAction(coupons: CouponModel[]): CouponAction {\r\n    return { type: CouponsActionType.CouponDownloaded, payload: coupons }\r\n}\r\n\r\nexport function couponUpdatedAction(coupon: CouponModel): CouponAction {\r\n    return { type: CouponsActionType.CouponUpdated, payload: coupon }\r\n}\r\n\r\nexport function couponDeletedAction(coupon: CouponModel): CouponAction {\r\n    return { type: CouponsActionType.CouponDeleted, payload: coupon }\r\n}\r\n\r\nexport function couponAddedAction(coupon: CouponModel): CouponAction {\r\n    return { type: CouponsActionType.CouponAdded, payload: coupon }\r\n}\r\n\r\nexport function couponsReducer(currentState: CouponsState = new CouponsState(), action: CouponAction): CouponsState {\r\n    let newState = { ...currentState };\r\n    let index;\r\n\r\n    switch (action.type) {\r\n        case CouponsActionType.CouponDownloaded:\r\n            newState.coupons = action.payload;\r\n            break;\r\n        case CouponsActionType.CouponAdded:\r\n            // only add to the state if the coupon isn't already there\r\n            if (!newState.coupons.includes(action.payload)) {\r\n                newState.coupons.push(action.payload);\r\n            }\r\n            break;\r\n        case CouponsActionType.CouponDeleted:\r\n            index = newState.coupons.findIndex(element => element.id === action.payload.id);\r\n            newState.coupons.splice(index, 1);\r\n            break;\r\n        case CouponsActionType.CouponUpdated:\r\n            index = newState.coupons.findIndex(element => element.id === action.payload.id);\r\n            newState.coupons[index] = action.payload;\r\n            break;\r\n    }\r\n    return newState;\r\n}","import CustomerModel from \"../Models/CustomerModel\";\r\n\r\nexport class CustomersState {\r\n    public customers: CustomerModel[] = [];\r\n}\r\n\r\nexport enum CustomersActionType{\r\n    CustomerAdded = \"CustomerAdded\",\r\n    CustomerUpdated = \"CustomerUpdated\",\r\n    CustomerDeleted = \"CustomerDeleted\",\r\n    CustomersDownloaded = \"CustomersDownloaded\"\r\n}\r\n\r\nexport interface CustomerAction {\r\n    type: CustomersActionType;\r\n    payload: any;\r\n}\r\n\r\nexport function customersDownloadedAction(customers: CustomerModel[]): CustomerAction {\r\n    return { type: CustomersActionType.CustomersDownloaded, payload: customers }\r\n}\r\nexport function customerUpdatedAction(customer: CustomerModel): CustomerAction {\r\n    return { type: CustomersActionType.CustomerUpdated, payload: customer }\r\n}\r\nexport function customerDeletedAction(customer: CustomerModel): CustomerAction {\r\n    return { type: CustomersActionType.CustomerDeleted, payload: customer }\r\n}\r\nexport function customerAddedAction(customer: CustomerModel): CustomerAction {\r\n    return { type: CustomersActionType.CustomerAdded, payload: customer }\r\n}\r\n\r\nexport function customersReducer(currentState: CustomersState = new CustomersState(), action: CustomerAction): CustomersState {\r\n    let newState = {...currentState};\r\n    let index;\r\n\r\n    switch (action.type) {\r\n        case CustomersActionType.CustomersDownloaded:\r\n            newState.customers = action.payload;\r\n            break;\r\n        case CustomersActionType.CustomerAdded:\r\n            newState.customers.push(action.payload);\r\n            break;\r\n        case CustomersActionType.CustomerDeleted:\r\n            index = newState.customers.findIndex(element => element.id === action.payload.id);\r\n            newState.customers.splice(index, 1);\r\n            break;\r\n        case CustomersActionType.CustomerUpdated:\r\n            index = newState.customers.findIndex(element => element.id === action.payload.id);\r\n            newState.customers[index] = action.payload;\r\n            break;\r\n    }\r\n    return newState;\r\n}","import { combineReducers, createStore } from 'redux';\r\nimport { authReducer } from './AuthState';\r\nimport { companiesReducer } from './CompanyState';\r\nimport { couponsReducer } from './CouponsState';\r\nimport { customersReducer } from './CustomersState';\r\n\r\nlet reducers = combineReducers({couponState: couponsReducer, authState: authReducer, companyState: companiesReducer, customerState: customersReducer});\r\nlet store = createStore(reducers);\r\n\r\nexport default store;","import { useEffect, useState } from \"react\";\nimport { NavLink } from \"react-router-dom\";\nimport { Unsubscribe } from \"redux\";\nimport UserModel from \"../../../Models/UserModel\";\nimport store from \"../../../Redux/Store\";\nimport \"./AuthCustomer.css\";\n\n/**\n * Allows logging in a customer.\n * \n */\nfunction AuthCustomer(): JSX.Element {\n    let [user, setUser] = useState<UserModel>(store.getState().authState.user);\n\n  // Subscribes to the store and gets the user details every time there is a change in the AuthState.\n    useEffect(() => {\n        let unSubscribeMe =  store.subscribe(() => {\n            setUser(store.getState().authState.user);\n        })\n        return function cleanup() {\n           unSubscribeMe();\n          };\n    });\n\n    return (\n        <div className=\"AuthCustomer\">\n            {\n                user && <>\n                    <span> Hello {user.name} </span>\n                    <span> | </span>\n                    <NavLink to=\"/logout\"> Logout </NavLink>\n                </>\n            }\n            {\n                !user && <>\n                    <span> Hello guest </span>\n                    <span> | </span>\n                    <NavLink to=\"/login/customer\"> Login </NavLink>\n                    <span> | </span>\n                    <NavLink to=\"/admin/add/customer\"> Register </NavLink>\n                </>\n            }\n        </div>\n    );\n}\n\nexport default AuthCustomer;\n","import { Notyf } from \"notyf\";\r\n\r\nclass Notify {\r\n    private notification = new Notyf({duration: 3000, position: {x: \"left\", y: \"top\" }, dismissible: true, types: [\r\n        {\r\n          type: 'success',\r\n          background: \"Gold\",\r\n        },\r\n        {\r\n            type: 'error',\r\n            background: 'Crimson',\r\n          \r\n        }\r\n      ]});\r\n\r\n    public success(message: string) {\r\n        this.notification.success(message);\r\n    }\r\n    public error(err: any) {\r\n        let message = this.extractMessage(err);\r\n        this.notification.error(message);\r\n\r\n    }\r\n    private extractMessage(err: any): string{\r\n        \r\n        if (typeof err === \"string\") {\r\n            return err;\r\n        }\r\n        if (typeof err?.response?.data?.message === \"string\") {\r\n            return err.response.data.message;\r\n        }\r\n        \r\n        if (Array.isArray(err.response?.data)) {\r\n            return err.response?.data[0];\r\n        }\r\n        // must be last\r\n        if (typeof err?.message === \"string\") {\r\n            return err.message;\r\n        }\r\n        return \"Some error occurred, please try again.\"\r\n    }\r\n    \r\n}\r\nlet notify = new Notify();\r\nexport default notify;","import { Button } from \"@material-ui/core\";\nimport { AccountBox } from \"@material-ui/icons\";\nimport { useEffect } from \"react\";\nimport { useHistory } from \"react-router\";\nimport store from \"../../../Redux/Store\";\nimport notify from \"../../../Services/Notifications\";\nimport \"./MyArea.css\";\n\nfunction MyArea(): JSX.Element {\n    let history = useHistory();\n\n    /**\n     * If the user is logged in, transfers him to his personal area depending on his client type.\n     *  */\n    function isLoggedIn(): void {\n        if (!store.getState().authState.user) {\n            notify.error(\"You are not logged in. Please log in.\")\n            history.push(\"/home\");\n        }\n        else {\n            history.push(\"/\" + store.getState().authState.user.clientType.toLowerCase() + \"/display\");\n        }\n    }\n    return (\n        <div className=\"MyArea\">\n            <Button onClick={isLoggedIn} startIcon={<AccountBox />} style={{ textTransform: \"none\" }} variant=\"contained\" color=\"primary\">My Area</Button>\n        </div>\n    );\n}\n\nexport default MyArea;\n","\r\nexport enum ClientType {\r\n    ADMINISTRATOR=\"ADMINISTRATOR\",\r\n    COMPANY=\"COMPANY\", \r\n    CUSTOMER=\"CUSTOMER\"\r\n}\r\n\r\nclass UserModel {\r\n    public id: number;\r\n    public name: string;\r\n    public email: string;\r\n    public password: string\r\n    public clientType: ClientType;\r\n    public token: string; \r\n}\r\n\r\nexport default UserModel;","import { Typography } from \"@material-ui/core\";\nimport { Component } from \"react\";\nimport { NavLink } from \"react-router-dom\";\nimport { ClientType } from \"../../../Models/UserModel\";\nimport AuthCustomer from \"../../AuthArea/AuthCustomer/AuthCustomer\";\nimport Login from \"../../AuthArea/Login/Login\";\nimport MyArea from \"../../DisplayArea/MyArea/MyArea\";\nimport \"./Header.css\";\n\nclass Header extends Component {\n\n    public render(): JSX.Element {\n        return (\n            <div className=\"Header\">\n                <br/>\n\t\t\t\t<Typography variant=\"h4\"> Coupon Wonder Land </Typography>\n               <span className=\"menu\"> <AuthCustomer/> </span> \n               <span className=\"user-area\"> <MyArea/> </span>\n            </div>\n        );\n    }\n}\n\nexport default Header;\n","class Globals {\r\n\r\n}\r\n\r\n//this is a globals comment\r\nclass DevelopmentGlobals extends Globals {\r\n    public urls = {\r\n        \r\n        categoryCoupons: \"http://localhost:8080/guest/get/coupons/category/\",\r\n        login: \"http://localhost:8080/login\",\r\n        guestAddCustomer: \"http://localhost:8080/guest/add/customer\",\r\n        images: \"http://localhost:8080/\",\r\n\r\n        // admin globals\r\n        addCompany: \"http://localhost:8080/admin/add/company/\",\r\n        getCompanies: \"http://localhost:8080/admin/get/companies/\",\r\n        deleteCompanies: \"http://localhost:8080/admin/delete/company/\",\r\n        updateCompany: \"http://localhost:8080/admin/update/company\",\r\n        addCustomer: \"http://localhost:8080/admin/add/customer\",\r\n        getCustomers: \"http://localhost:8080/admin/get/customers\",\r\n        updateCustomer: \"http://localhost:8080/admin/update/customer\",\r\n        deleteCustomer: \"http://localhost:8080/admin/delete/customer/\",\r\n\r\n        // company globals \r\n        getCompanyCoupons: \"http://localhost:8080/company/get/company-coupons\",\r\n        addCoupon: \"http://localhost:8080/company/add-coupon\",\r\n        deleteCoupon: \"http://localhost:8080/company/delete-coupon/\",\r\n        updateCoupon: \"http://localhost:8080/company/update/coupon\",\r\n\r\n        //customer globals\r\n        purchaseCoupon: \"http://localhost:8080/customer/purchase\",\r\n        getCustomerDetails: \"http://localhost:8080/customer/details\",\r\n        getCustomerCoupons: \"http://localhost:8080/customer/coupons\"\r\n        \r\n    };\r\n}\r\nclass ProductionGlobals extends Globals {\r\n    public myUrl = \"https://coupon-wonderland.herokuapp.com/\"\r\n    public urls = {\r\n        categoryCoupons: this.myUrl + \"guest/get/coupons/category/\",\r\n        login:  this.myUrl + \"login\",\r\n        guestAddCustomer:  this.myUrl + \"guest/add/customer\",\r\n        // images: this.myUrl + \"/\",\r\n      \r\n        // admin globals\r\n        addCompany:  this.myUrl + \"admin/add/company/\",\r\n        getCompanies:  this.myUrl + \"admin/get/companies\",\r\n        deleteCompanies:  this.myUrl + \"admin/delete/company/\",\r\n        updateCompany:  this.myUrl + \"admin/update/company\",\r\n        addCustomer:  this.myUrl + \"admin/add/customer\",\r\n        getCustomers:  this.myUrl + \"admin/get/customers\",\r\n        updateCustomer:  this.myUrl + \"admin/update/customer\",\r\n        deleteCustomer:  this.myUrl + \"admin/delete/customer/\",\r\n\r\n        // company globals \r\n        getCompanyCoupons:  this.myUrl + \"company/get/company-coupons\",\r\n        addCoupon:  this.myUrl + \"company/add-coupon\",\r\n        deleteCoupon:  this.myUrl + \"company/delete-coupon/\",\r\n        updateCoupon:  this.myUrl + \"company/update/coupon\",\r\n        \r\n\r\n        //customer globals\r\n        purchaseCoupon:  this.myUrl + \"customer/purchase\",\r\n        getCustomerDetails:  this.myUrl + \"customer/details\",\r\n        getCustomerCoupons:  this.myUrl + \"customer/coupons\"\r\n    };\r\n}\r\n\r\nconst globals = process.env.NODE_ENV === \"development\" ? new DevelopmentGlobals() : new ProductionGlobals();\r\nexport default globals;","import { useHistory } from \"react-router\";\nimport { useForm } from \"react-hook-form\";\nimport CredentialsModel from \"../../../Models/CredentialsModel\";\nimport \"./Login.css\";\nimport axios from \"axios\";\nimport { Button, FormControl, Input, InputLabel, makeStyles, IconButton, ButtonGroup } from \"@material-ui/core\";\nimport globals from \"../../../Services/Globals\";\nimport UserModel, { ClientType } from \"../../../Models/UserModel\";\nimport store from \"../../../Redux/Store\";\nimport { loginAction } from \"../../../Redux/AuthState\";\nimport VisibilityIcon from \"@material-ui/icons/Visibility\";\nimport { NavLink } from \"react-router-dom\";\nimport { ArrowBack, LockOpen } from \"@material-ui/icons\";\nimport notify from \"../../../Services/Notifications\";\nimport { useState } from \"react\";\n\ninterface LoginProps {\n    type: ClientType;\n}\n\nconst useStyles = makeStyles({\n    root: {\n        position: \"absolute\",\n        right: \"1%\",\n        top: \"20%\",\n        \"&:hover\": {\n            backgroundColor: \"transparent\"\n        }\n    }\n})\n/**\n * Submits user credentials to the server in order to validate user.\n * If validated, dispatches the user details to the autState and transfers the user to his personal area.\n * @param props Client type\n * \n */\nfunction Login(props: LoginProps): JSX.Element {\n    let history = useHistory();\n    const classes = useStyles();\n    let { register, handleSubmit } = useForm<CredentialsModel>();\n    let [passwordShown, setPasswordShown] = useState(false);\n    let togglePasswordVisiblity = () => {\n        setPasswordShown(passwordShown ? false : true);\n    };\n\n    /**\n     * Manipulates a string, making each word begin with a capital letter followed by lower case letters.\n     * @param typeName \n     * @returns string\n     */\n    function niceString(typeName: string): string {\n        typeName = typeName.toLowerCase();\n        typeName = typeName.charAt(0).toUpperCase() + typeName.slice(1);\n        typeName = typeName.replace('_', ' ')\n        let words = typeName.split(' ');\n        for (let i = 0; i < words.length; i++) {\n            words[i] = words[i][0].toUpperCase() + words[i].substr(1);\n        }\n        return words.join(\" \");\n    }\n\n    /**\n     * Passes the user credentials from the submitted form along with the client type to the server.\n     * @param credentials \n     */\n    async function send(credentials: CredentialsModel) {\n        if (store.getState().authState.user) {\n            notify.error('You are already logged in. Please log out.')\n        }\n        else {\n            let credentialsUrl = \"?email=\" + credentials.email + \"&password=\" + credentials.password;\n\n            switch (props.type) {\n                case ClientType.ADMINISTRATOR:\n                    credentialsUrl += \"&type=\" + ClientType.ADMINISTRATOR;\n                    break;\n                case ClientType.COMPANY:\n                    credentialsUrl += \"&type=\" + ClientType.COMPANY;\n                    break;\n                case ClientType.CUSTOMER:\n                    credentialsUrl += \"&type=\" + ClientType.CUSTOMER;\n                    break;\n            }\n            try {\n                let response = await axios.post<UserModel>(globals.urls.login + credentialsUrl\n                );\n                store.dispatch(loginAction(response.data));\n                notify.success(\"You have been successfully logged in!\");\n                history.push(\"/\" + props.type.toString().toLowerCase() + \"/display\");\n            } catch (error) {\n                notify.error(error);\n            }\n        }\n    }\n    return (\n        <div className=\"Login \">\n            <h2>Login as {niceString(props.type)}</h2>\n            <form onSubmit={handleSubmit(send)}>\n                <FormControl>\n                    <InputLabel>Email</InputLabel>\n                    <Input id=\"email\" {...register(\"email\")} type=\"email\"  required/>\n                </FormControl>\n                <br />\n                <FormControl>\n                    <InputLabel>Password</InputLabel>\n                    <Input id=\"password\" {...register(\"password\")} type={passwordShown ? \"text\" : \"password\"} required />\n                    <IconButton className={classes.root} onClick={togglePasswordVisiblity}>{<VisibilityIcon />}</IconButton>\n                </FormControl>\n                <br />\n                <br />\n                <ButtonGroup variant=\"contained\" >\n                    <Button type=\"submit\" startIcon={<LockOpen />} style={{ textTransform: \"none\" }} color=\"primary\">Login</Button>\n                    <NavLink to=\"/home\">\n                        <Button startIcon={<ArrowBack />} style={{ textTransform: \"none\" }} variant=\"contained\" color=\"inherit\">Back</Button>\n                    </NavLink>\n                </ButtonGroup>\n            </form>\n\n        </div>\n    );\n\n}\nexport default Login;\n","import { useEffect } from \"react\";\nimport { useHistory } from \"react-router\";\nimport { logoutAction } from \"../../../Redux/AuthState\";\nimport store from \"../../../Redux/Store\";\nimport notify from \"../../../Services/Notifications\";\nimport \"./Logout.css\";\n\n/**\n * Logs the user out and dispatches the store accordingly. \n * @returns \n */\nfunction Logout(): JSX.Element {\n    let history = useHistory();\n\n    useEffect(() => {\n        store.dispatch(logoutAction())\n        notify.success(\"You are now logged out.\");\n        history.push(\"/home\")\n    });\n\n    return (<></>);\n}\n\nexport default Logout;\n","import { Button, ButtonGroup, Card, CardActions, CardMedia, CardContent, CardHeader, createStyles, IconButton, makeStyles, Theme, Typography } from \"@material-ui/core\";\nimport { ControlPoint } from \"@material-ui/icons\";\nimport { ReactNode } from \"react\";\nimport { useHistory, useLocation } from \"react-router\";\nimport { NavLink } from \"react-router-dom\";\nimport CouponModel from \"../../../Models/CouponModel\";\nimport { ClientType } from \"../../../Models/UserModel\";\nimport { couponDeletedAction } from \"../../../Redux/CouponsState\";\nimport store from \"../../../Redux/Store\";\nimport globals from \"../../../Services/Globals\";\nimport jwtAxios from \"../../../Services/jwtAxios\";\nimport notify from \"../../../Services/Notifications\";\nimport \"./CouponCard.css\";\n\nconst useStyles = makeStyles((theme: Theme) =>\ncreateStyles({\n  cardStyle: {\n    width: 300\n  },\n    media: {\n      height: 0,\n      paddingTop: '56.25%',\n    },\n    title: {\n      maxWidth: 270,\n      fontSize: 14,\n      marginBottom: 0,\n      paddingBottom: 0\n    },\n    description: {\n      marginTop: 0,\n      paddingTop: 0,\n      \n    },\n    content: {\n      textAlign: \"left\"\n    },\n    buttons: {\n      justifyContent: \"center\"\n\n    }\n  }));\n  \n  interface CouponCardProps {\n    coupon: CouponModel;\n    handleD?: Function;\n    handleU?: Function;\n  \n  }\n\nfunction CouponCard(props: CouponCardProps): JSX.Element {\n  let classes = useStyles();\n  let location = useLocation();\n  let user = store.getState().authState.user;\n\n  /**\n   * Converts a date to dd/MM/yy format.\n   * @param dateMilli \n   * @returns \n   */\n  function taskDate(dateMilli: string | number | Date) {\n    var d = (new Date(dateMilli) + '').split(' ');\n    d[2] = d[2] + ',';\n\n    return [d[1], d[2], d[3]].join(' ');\n  }\n  \n  /**\n   * Only show the coupon if there is more than one (amount >0), it is the logged in company's coupon, or the admin is the user .\n   * @returns boolean\n   */\n  const showCoupon = (): boolean => {\n    let show = false;\n    if (props.coupon.amount > 0) {\n      show = true;\n    }\n    else if (user?.clientType === ClientType.COMPANY && user?.id === props.coupon.company.id) {\n      show = true;\n    }\n    else if (user?.clientType === ClientType.ADMINISTRATOR) {\n      show = true;\n    }\n    else if (user?.clientType === ClientType.CUSTOMER) {\n      let cust = store.getState().customerState.customers.find(c => c.id === user.id);\n      if (cust !== undefined) {\n        let custCoupon = cust.coupons.find(c => c.id === props.coupon.id);\n        if (custCoupon !== undefined)\n          show = true;\n        }\n      }\n      return show;\n  }\n\n\n  return (\n    <div className=\"CouponCard\" >\n      {showCoupon() &&\n        <Card key={props.coupon.id} className={classes.cardStyle}>\n          <NavLink key={props.coupon.id} to={\"/coupons/full-details/\" + props.coupon.id.toString()} >\n\n            {props.coupon.imageName !== \"no_image\" &&\n              <CardMedia\n                className={classes.media}\n                image={props.coupon.imageName}\n              />\n            }\n            <CardHeader className={classes.title} title={props.coupon.title} />\n            <CardContent className={classes.content} >\n              <Typography className={classes.description} variant=\"body2\" color=\"textSecondary\">\n                {props.coupon.description}\n              </Typography>\n              Company: {props.coupon?.company.name}\n              <br />\n              End Date: &nbsp; {taskDate(props.coupon.endDate)}\n              <Typography variant=\"body1\">\n                Price:  ${props.coupon.price}\n              </Typography>\n            </CardContent>\n          </NavLink>\n          {/* show delete and update buttons only in the company display are */}\n          {location.pathname === \"/company/display\" &&\n            <CardActions className={classes.buttons}>\n              <Button\n                onClick={() => props.handleD(props.coupon)}\n                variant=\"contained\" color=\"primary\"> Delete </Button>\n              <Button onClick={() => props.handleU(props.coupon.id)}\n                variant=\"contained\"> Update </Button>\n            </CardActions>\n          }\n        </Card>\n      }\n    </div>\n  );\n}\n\n\nexport default CouponCard;\n","import { Button, Typography } from \"@material-ui/core\";\nimport { Home } from \"@material-ui/icons\";\nimport axios from \"axios\";\nimport { Component } from \"react\";\nimport { RouteComponentProps } from \"react-router\";\nimport { NavLink } from \"react-router-dom\";\nimport CouponModel from \"../../../Models/CouponModel\";\nimport { couponAddedAction } from \"../../../Redux/CouponsState\";\nimport store from \"../../../Redux/Store\";\nimport globals from \"../../../Services/Globals\";\nimport CouponCard from \"../CouponCard/CouponCard\";\nimport \"./CategoryCoupons.css\";\n\ninterface CategoryCouponsState {\n    coupons: CouponModel[];\n\n}\n\n\n// The parameter passed by from the parent component via routing.\ninterface RouteParams {\n    category: string;\n}\n\ninterface CategoryCouponsProps extends RouteComponentProps<RouteParams> { }\n\n\n\n    /**\n     * Displays all coupons from a given category.\n     */\nclass CategoryCoupons extends Component<CategoryCouponsProps, CategoryCouponsState> {\n\n    public async componentDidMount() {\n        try {\n            let category = this.props.match.params.category.toString();\n            let response = await axios.get<CouponModel[]>(globals.urls.categoryCoupons + category);\n            response.data.forEach((coup)=> (\n                store.dispatch(couponAddedAction(coup))\n            ))\n            this.setState({ coupons: response.data });\n        } catch (error) {\n            console.log(error.message);\n\n        }\n    }\n\n    public constructor(props: CategoryCouponsProps) {\n        super(props);\n        this.state = { coupons: null };\n    }\n    public render(): JSX.Element {\n        /**\n         * Manipulates a string, making each word begin with a capital letter followed by lower case letters.\n         * @returns string\n         */\n        function niceString(categoryName: string): string {\n            categoryName = categoryName.toLowerCase();\n            categoryName = categoryName.charAt(0).toUpperCase() + categoryName.slice(1);\n            categoryName = categoryName.replace('_', ' ')\n            let words = categoryName.split(' ');\n            for (let i = 0; i < words.length; i++) {\n                words[i] = words[i][0].toUpperCase() + words[i].substr(1);\n            }\n            return words.join(\" \");\n        }\n        return (\n            <div className=\"CategoryCoupons ScrollerDowner\">\n                <Typography variant=\"h4\">  {niceString(this.props.match.params.category.toString())} </Typography>\n                <br /><br />\n                {/* { only display coupons that have an amount greater than zero} */}\n                {this.state.coupons?.filter(c => c.amount > 0).map(c => <CouponCard key={c.id} coupon={c}/>)}\n                <br />\n                <br />\n                <NavLink to=\"/home\">\n                    <Button startIcon={<Home />} style={{ textTransform: \"none\" }} variant=\"contained\" color=\"primary\">Home</Button>\n                </NavLink>\n\n\n            </div>\n        );\n    }\n}\n\nexport default CategoryCoupons;\n","import  axios  from 'axios';\r\nimport store from '../Redux/Store';\r\n\r\n/**\r\n * Sends jwt token with each request.\r\n */\r\nlet jwtAxios = axios.create();\r\njwtAxios.interceptors.request.use(request => {\r\n    request.headers = {\r\n        \"token\":store.getState().authState.user?.token\r\n        \r\n    };\r\n    return request;\r\n});\r\n\r\nexport default jwtAxios;","import { Button, Card, CardActions, CardContent, CardMedia, CardHeader, createStyles, makeStyles, Theme, Typography } from \"@material-ui/core\";\nimport ArrowBackIcon from '@material-ui/icons/ArrowBack';\nimport { useEffect, useState } from \"react\";\nimport { RouteComponentProps, useHistory } from \"react-router\";\nimport CouponModel from \"../../../Models/CouponModel\";\nimport { ClientType } from \"../../../Models/UserModel\";\nimport { couponUpdatedAction } from \"../../../Redux/CouponsState\";\nimport { customerUpdatedAction } from \"../../../Redux/CustomersState\";\nimport store from \"../../../Redux/Store\";\nimport globals from \"../../../Services/Globals\";\nimport jwtAxios from \"../../../Services/jwtAxios\";\nimport notify from \"../../../Services/Notifications\";\nimport \"./FullCouponDetails.css\";\n\n\n\nconst useStyles = makeStyles((theme: Theme) =>\n    createStyles({\n        cardStyle: {\n            minWidth: 350,\n        },\n        media: {\n            height: 0,\n            paddingTop: '56.25%',\n        },\n        title: {\n            fontSize: 14,\n            marginBottom: 0,\n            paddingBottom: 0\n        },\n        description: {\n            marginTop: 0,\n            paddingTop: 0,\n\n        },\n        content: {\n            textAlign: \"left\",\n        },\n        buttons: {\n            justifyContent: \"center\"\n        }\n    }));\n\n\ninterface RouteParams {\n    id: string;\n}\n\ninterface FullCouponDetailsProps extends RouteComponentProps<RouteParams> {\n}\n\nfunction FullCouponDetails(props: FullCouponDetailsProps): JSX.Element {\n    let classes = useStyles();\n    let user = store.getState().authState?.user;\n    const history = useHistory();\n    console.log(+props.match.params.id);\n\n    let [coupon, setCoupon] = useState<CouponModel>(store.getState().couponState.coupons.find((c) => (\n        c.id === +props.match.params.id)));\n\n    /**\n     * Converts a date to dd/MM/yy format.\n     * @param dateMilli \n     */\n    function taskDate(dateMilli: string | number | Date) {\n        var d = (new Date(dateMilli) + '').split(' ');\n        d[2] = d[2] + ',';\n\n        return [d[1], d[2], d[3]].join(' ');\n    }\n\n    /**\n     * If the user is a customer, passes on the selected coupon to the server in order to make a purchase. \n     */\n    const purchaseCoupon = async () => {\n        if (store.getState().authState.user?.clientType === ClientType.CUSTOMER) {\n            try {\n                let response = await jwtAxios.put<CouponModel>(globals.urls.purchaseCoupon, coupon);\n                let customer = store.getState().customerState.customers.find((c) => c.id === user.id);\n                customer.coupons.push(response.data);\n                store.dispatch(customerUpdatedAction(customer));\n                store.dispatch(couponUpdatedAction(response.data));\n                notify.success(\"Coupon \" + coupon.title + \" purchased. Keep on shopping!\");\n                history.push(\"/home\");\n            } catch (error) {\n                notify.error(error);\n            }\n        } else {\n            notify.error(\"Please log in to continue purchase\")\n            history.push(\"/login/customer\");\n        }\n    }\n    /**\n     * Gives the user a vague amount of the selected coupon and returns it as a string.\n     * @returns string\n     */\n    const showAmount = (): string => {\n        let answer = \"No coupons left!\";\n        if (store.getState().authState.user?.id === coupon.company.id) {answer = coupon.amount.toString();}\n        else if (coupon.amount === 1) { answer = \"Last on left!\" }\n        else if (coupon.amount < 10 && coupon.amount > 0) { answer = \"Under 10 left!\" }\n        else if (coupon.amount < 50 && coupon.amount > 9) { answer = \"Under 50 left!\" }\n        else if (coupon.amount < 100 && coupon.amount > 49) { answer = \"Under 100\" }\n        else if (coupon.amount > 100) { answer = \"Over 100\" }\n        else if (coupon.amount > 200) { answer = \"Over 200\" }\n        else if (coupon.amount > 500) { answer = \"Over 500\" }\n        else if (coupon.amount > 1000) { answer = \"Over 1000\" }\n        return answer;\n    }\n    /**\n     *  Manipulates a string, making each word begin with a capital letter followed by lower case letters.\n     * @param categoryName \n     * @returns string\n     */\n    function niceString(categoryName: string): string {\n        categoryName = categoryName.toLowerCase();\n        categoryName = categoryName.charAt(0).toUpperCase() + categoryName.slice(1);\n        categoryName = categoryName.replace('_', ' ')\n        let words = categoryName.split(' ');\n        for (let i = 0; i < words.length; i++) {\n            words[i] = words[i][0].toUpperCase() + words[i].substr(1);\n        }\n        return words.join(\" \");\n\n    }\n\n    /**\n     * Decides whether to show the Purchase Button to the user.\n     * Will return true only if the user is a guest or a customer that has not purchased this coupon before. \n     * @returns boolean\n     */\n    const toShowOrNotToShow = (): boolean => {\n        let show: boolean = true;\n        if (user?.clientType === ClientType.ADMINISTRATOR) {\n            show = false;\n        }\n        if (user?.clientType === ClientType.COMPANY) {\n            show = false;\n        }\n        // check if current customer has this coupon already\n        let currentUser = store.getState().customerState.customers.find(c => c.id === user?.id)\n        let purchasedCoupon = currentUser?.coupons.find((c) => c.id === +props.match.params.id)\n        if (purchasedCoupon) {\n            show = false\n        }\n        return show;\n    }\n\n    /**\n     * Insures a refresh does not crash the site by using the local storage.\n     */\n    useEffect(() => {\n        //  downloads from local storage\n        if (coupon === undefined) {\n            let storageCoupon = localStorage.getItem(\"storage-coupon\");\n            if (storageCoupon !== 'undefined' && storageCoupon !== 'null') {\n                setCoupon(JSON.parse(storageCoupon));\n            }\n        } else {\n            // sends to local storage\n            localStorage.setItem(\"storage-coupon\", JSON.stringify(coupon));\n        }\n    })\n    return (\n        <div className=\"FullCouponDetails\">\n            {console.log(props.match.params.id)}\n\n            {coupon &&\n                <Card key={coupon.id} className={classes.cardStyle}>\n                    {coupon.imageName !== \"no_image\" &&\n                        <CardMedia\n                            className={classes.media}\n                            image={coupon.imageName}\n                        />\n                    }\n                    <CardHeader className={classes.title} title={coupon.title} subheader={niceString(coupon.category)} />\n                    <CardContent className={classes.content} >\n                        <Typography className={classes.description} variant=\"body2\" color=\"textSecondary\">\n                            {coupon.description}\n                        </Typography>\n                        <br />\n                        Company: {coupon?.company.name}\n                        <br />\n                        <br />\n                        Start Date: &nbsp; {taskDate(coupon.startDate)}\n                        <br />\n                        <br />\n                        End Date: &nbsp; {taskDate(coupon.endDate)}\n                        <br />\n                        <br />\n                        {/* Show the amount only it is larger than 0 or the coupon belongs to the company */}\n                        {(coupon.amount > 0 || user?.clientType === ClientType.COMPANY) && <>\n                            Amount: &nbsp; {showAmount()}\n                            <br />\n                            <br />\n                        </>\n                        }\n                        <Typography variant=\"body1\">\n                            Price:  ${coupon.price}\n                        </Typography>\n                    </CardContent>\n                    <CardActions className={classes.buttons}>\n                        {\n                            toShowOrNotToShow() &&\n                            <Button\n                                onClick={() => purchaseCoupon()}\n                                variant=\"contained\" color=\"primary\"> Buy </Button>\n                        }\n                        <Button startIcon={< ArrowBackIcon />} style={{ textTransform: \"none\" }} onClick={history.goBack} >Back</Button>\n                    </CardActions>\n\n                </Card>\n            }\n        </div>\n    );\n}\n\nexport default FullCouponDetails;\n","import { Button, FormControl, FormHelperText, Input, InputLabel, makeStyles, Typography, IconButton } from \"@material-ui/core\";\nimport { Add, ArrowBack} from \"@material-ui/icons\";\nimport { useEffect, useState } from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport { useHistory } from \"react-router\";\nimport { NavLink } from \"react-router-dom\";\nimport CompanyModel from \"../../../../Models/CompanyModel\";\nimport { ClientType } from \"../../../../Models/UserModel\";\nimport { companyAddedAction } from \"../../../../Redux/CompanyState\";\nimport store from \"../../../../Redux/Store\";\nimport globals from \"../../../../Services/Globals\";\nimport jwtAxios from \"../../../../Services/jwtAxios\";\nimport notify from \"../../../../Services/Notifications\";\nimport  VisibilityIcon  from \"@material-ui/icons/Visibility\";\nimport \"./AddCompany.css\";\n\nconst useStyles = makeStyles({\n    root:{\n        position: \"absolute\",\n        left: \"80%\",\n        top: \"14%\",\n        \"&:hover\":{\n            backgroundColor:\"transparent\"\n        }\n    }\n})\n\n/**\n * Displays a form which allows the admin to add a company. \n */\nfunction AddCompany(): JSX.Element {\n    let { handleSubmit, register } = useForm<CompanyModel>();\n    let history = useHistory();\n\n    const classes = useStyles();\n    let [passwordShown, setPasswordShown] = useState(false);\n\n    const togglePasswordVisiblity = () => {\n        setPasswordShown(passwordShown ? false : true);\n      };\n\n    useEffect(() => {\n        if (store.getState().authState.user?.clientType !== ClientType.ADMINISTRATOR) {\n            notify.error(\"Please log in\");\n            history.push(\"/login/admin\")\n        }\n    })\n    /**\n     * Receives the company data from the form. The function then sends the company\n     *  as FormData to the server. \n     * @param company \n     */\n    async function send(company: CompanyModel) {\n        try {\n            \n            let response = await jwtAxios.post<CompanyModel>(globals.urls.addCompany, company);\n            let addedCompany = response.data;\n            store.dispatch(companyAddedAction(addedCompany));\n            notify.success(addedCompany.name + \"Company added\");\n            history.push(\"/administrator/display\");\n        } catch (error) {\n            notify.error(error);\n        }\n    }\n    return (\n        <div className=\"AddCompany \">\n                <form onSubmit={handleSubmit(send)} >\n                <Typography variant=\"h6\">Add a Company</Typography>\n                    <FormControl>\n                        <InputLabel>Company Name</InputLabel>\n                        <Input id=\"name\" {...register(\"name\")} required inputProps={{minLength: 3,  maxLength: 25}} />\n                    </FormControl>\n                    <br />\n                    <FormControl>\n                        <InputLabel >Company Email</InputLabel>\n                        <Input id=\"email\" type=\"email\" {...register(\"email\") } required/>\n                    </FormControl>\n                    <br />\n                    <FormControl>\n                        <InputLabel>Company Password</InputLabel>\n                        <Input id=\"password\" type={passwordShown ? \"text\" : \"password\"} {...register(\"password\")} inputProps={{minLength: 3,  maxLength: 15}} required />\n                        <FormHelperText>Make sure to write it down!</FormHelperText>\n                        <IconButton className={classes.root} onClick={togglePasswordVisiblity}>{<VisibilityIcon />}</IconButton>\n                    </FormControl>\n                    <br />\n                    <br />\n                    <Button type=\"submit\" variant=\"contained\" color=\"primary\">   Add &nbsp;<Add /> </Button>\n                    <NavLink to=\"/administrator/display\">\n                        <Button variant=\"contained\">Back &nbsp; <ArrowBack /> </Button>\n                    </NavLink>\n                </form>\n\n\n        </div>\n    );\n}\n\nexport default AddCompany;\n","import { Button, FormControl, FormHelperText, Input, InputLabel, IconButton, Typography, makeStyles } from \"@material-ui/core\";\nimport { Add, ArrowBack } from \"@material-ui/icons\";\nimport axios from \"axios\";\nimport { useEffect, useState } from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport { useHistory } from \"react-router\";\nimport { NavLink } from \"react-router-dom\";\nimport VisibilityIcon from \"@material-ui/icons/Visibility\";\nimport CustomerModel from \"../../../../Models/CustomerModel\";\nimport { ClientType } from \"../../../../Models/UserModel\";\nimport { customerAddedAction } from \"../../../../Redux/CustomersState\";\nimport store from \"../../../../Redux/Store\";\nimport globals from \"../../../../Services/Globals\";\nimport jwtAxios from \"../../../../Services/jwtAxios\";\nimport notify from \"../../../../Services/Notifications\";\nimport \"./AddCustomer.css\";\n\nconst useStyles = makeStyles({\n    root: {\n        position: \"absolute\",\n        left: \"82%\",\n        top: \"15%\",\n        \"&:hover\": {\n            backgroundColor: \"transparent\"\n        }\n    }\n})\n\n/**\n *  Displays a form which allows the admin to add a customer.\n */\nfunction AddCustomer(): JSX.Element {\n    let { handleSubmit, register } = useForm<CustomerModel>();\n    let history = useHistory();\n\n    let [passwordShown, setPasswordShown] = useState(false);\n    const classes = useStyles();\n\n    let togglePasswordVisiblity = () => {\n        setPasswordShown(passwordShown ? false : true);\n    };\n\n\n    useEffect(() => {\n        if (store.getState().authState.user?.clientType === ClientType.CUSTOMER ||\n            store.getState().authState.user?.clientType === ClientType.COMPANY) {\n            notify.error(\"Please log in\");\n            history.push(\"/login/admin\")\n        }\n    })\n\n    /**\n     * Receives the company data from the form. The function then sends the company\n     * as FormData to the server. \n     * @param customer \n     */\n    async function send(customer: CustomerModel) {\n        try {\n            let response;\n            let addedCustomer;\n            if (store.getState().authState.user?.clientType === ClientType.ADMINISTRATOR) {\n                response = await jwtAxios.post<CustomerModel>(globals.urls.addCustomer, customer);\n                addedCustomer = response.data;\n                store.dispatch(customerAddedAction(addedCustomer));\n                notify.success(\"Customer \" + addedCustomer.firstName + \" \" + addedCustomer.lastName + \"  added\");\n                history.push(\"/administrator/display\");\n            } else {\n                response = await axios.post<CustomerModel>(globals.urls.guestAddCustomer, customer);\n                addedCustomer = response.data;\n                notify.success(\"Customer \" + addedCustomer.firstName + \" \" + addedCustomer.lastName + \"  added\");\n                history.push(\"/login/customer\");\n            }\n        } catch (error) {\n            notify.error(error);\n        }\n    }\n\n\n    return (\n        <div className=\"AddCustomer\">\n            <form title=\"Add a Customer\" onSubmit={handleSubmit(send)} >\n                <Typography variant=\"h6\">Add a Customer</Typography>\n                <FormControl>\n                    <InputLabel>Customer First Name</InputLabel>\n                    <Input id=\"firstName\" {...register(\"firstName\")} inputProps={{ minLength: 3, maxLength: 20 }} required />\n                </FormControl>\n                <br />\n                <FormControl>\n                    <InputLabel>Customer Last Name</InputLabel>\n                    <Input id=\"lastName\" {...register(\"lastName\")} inputProps={{ minLength: 3, maxLength: 20 }} required />\n                </FormControl>\n                <br />\n                <FormControl>\n                    <InputLabel>Customer Email</InputLabel>\n                    <Input id=\"email\" type=\"email\" {...register(\"email\")} required />\n                </FormControl>\n                <br />\n                <FormControl>\n                    <InputLabel>Customer Password</InputLabel>\n                    <Input id=\"password\" type={passwordShown ? \"text\" : \"password\"}  {...register(\"password\")} inputProps={{ minLength: 3, maxLength: 15 }} required />\n                    <IconButton className={classes.root} onClick={togglePasswordVisiblity}>{<VisibilityIcon />}</IconButton>\n                    <FormHelperText>Make sure to write it down!</FormHelperText>\n                </FormControl>\n                <br />\n                <br />\n                <Button type=\"submit\" variant=\"contained\" color=\"primary\">   Add &nbsp;<Add /> </Button>\n                <NavLink to={store.getState().authState.user?.clientType === ClientType.ADMINISTRATOR ? \"/administrator/display\" : \"/home\"}>\n                    <Button variant=\"contained\">Back &nbsp; <ArrowBack /> </Button>\n                </NavLink>\n            </form>\n\n        </div>\n    );\n}\n\nexport default AddCustomer;\n","import { Button, Card, CardHeader } from \"@material-ui/core\";\nimport { NavLink } from \"react-router-dom\";\nimport \"./OperationCard.css\";\n\ninterface OperationCardProps {\n\toperation: string;\n}\n\nfunction OperationCard(props: OperationCardProps): JSX.Element {\n    return (\n        <div className=\"OperationCard  \">\n            <Card>\n                <CardHeader title={props.operation}/>\n            </Card>\n           \n        </div>\n    );\n}\n\nexport default OperationCard;\n","import { Button } from \"@material-ui/core\";\nimport { Home } from \"@material-ui/icons\";\nimport { useState } from \"react\";\nimport { useEffect } from \"react\";\nimport { NavLink, useHistory } from \"react-router-dom\";\nimport CompanyModel from \"../../../../Models/CompanyModel\";\nimport CustomerModel from \"../../../../Models/CustomerModel\";\nimport { ClientType } from \"../../../../Models/UserModel\";\nimport { companiesDownloadedAction } from \"../../../../Redux/CompanyState\";\nimport { customersDownloadedAction } from \"../../../../Redux/CustomersState\";\nimport store from \"../../../../Redux/Store\";\nimport globals from \"../../../../Services/Globals\";\nimport jwtAxios from \"../../../../Services/jwtAxios\";\nimport notify from \"../../../../Services/Notifications\";\nimport OperationCard from \"../../OperationCard/OperationCard\";\nimport \"./AdminDisplay.css\";\n\n/**\n * Displays the available operations for the admin. \n */\nfunction AdminDisplay(): JSX.Element {\n    let history = useHistory();\n    let [compsAndCustsFetched, setCompsAndCustsFetched] = useState<boolean>(false);\n\n    /**\n     * Gets all the companies from the database and dispatches them to the store.\n     */\n    async function getCompanies() {\n        try {\n            let response = await jwtAxios.get<CompanyModel[]>(globals.urls.getCompanies);\n            store.dispatch(companiesDownloadedAction(response.data));\n        } catch (error) {\n            notify.error(error);\n        }\n    }\n    /**\n     * Gets all the customers from the database and dispatches them to the store.\n     */\n    async function getCustomers() {\n        try {\n            let response = await jwtAxios.get<CustomerModel[]>(globals.urls.getCustomers);\n            store.dispatch(customersDownloadedAction(response.data));\n        } catch (error) {\n            notify.error(error);\n        }\n    }\n\n    useEffect(() => {\n        if (store.getState().authState.user?.clientType !== ClientType.ADMINISTRATOR) {\n            notify.error(\"Please log in\");\n            history.push(\"/login/admin\");\n            \n            //Gets companies and customers for the first time\n        } else if (!compsAndCustsFetched) {\n                getCompanies();\n                getCustomers();\n                setCompsAndCustsFetched(true);\n            }\n\n        \n    }, []);\n\n    return (\n        <div className=\"AdminDisplay\">\n            <br />\n            <NavLink className=\"marginOpCard\" to=\"/admin/add/company\"><OperationCard operation=\"Add Company\" /></NavLink>\n            <NavLink className=\"marginOpCard\" to=\"/admin/update/company\"><OperationCard operation=\"Update Company\" /></NavLink>\n            <NavLink className=\"marginOpCard\" to=\"/admin/delete/company\"><OperationCard operation=\"Delete Company\" /></NavLink>\n            <br />\n            <br />\n            <br />\n            <NavLink className=\"marginOpCard\" to=\"/admin/add/customer\"><OperationCard operation=\"Add Customer\" /></NavLink>\n            <NavLink className=\"marginOpCard\" to=\"/admin/update/customer\"><OperationCard operation=\"Update Customer\" /></NavLink>\n            <NavLink className=\"marginOpCard\" to=\"/admin/delete/customer\"><OperationCard operation=\"Delete Customer\" /></NavLink>\n            <br />\n            <br />\n            <NavLink to=\"/home\">\n                <Button startIcon={<Home />} style={{ textTransform: \"none\" }} variant=\"contained\">Home</Button>\n            </NavLink>\n\n        </div>\n    );\n}\n\nexport default AdminDisplay;\n","import { Card, CardHeader, IconButton } from \"@material-ui/core\";\nimport { red } from \"@material-ui/core/colors\";\nimport { Delete } from \"@material-ui/icons\";\nimport { ReactNode } from \"react\";\nimport { useHistory } from \"react-router\";\nimport CompanyModel from \"../../../../Models/CompanyModel\";\nimport { companyDeletedAction } from \"../../../../Redux/CompanyState\";\nimport store from \"../../../../Redux/Store\";\nimport globals from \"../../../../Services/Globals\";\nimport jwtAxios from \"../../../../Services/jwtAxios\";\nimport notify from \"../../../../Services/Notifications\";\nimport \"./CompanyCard.css\";\n\ninterface CompanyCardProps {\n\tcompany: CompanyModel;\n    children: ReactNode;\n    handle: Function;\n\n}\n\nfunction CompanyCard(props: CompanyCardProps): JSX.Element {\n    return (\n        <div className=\"CompanyCard\">\n\t\t\t<Card key={props.company.id}>\n                   <CardHeader action= {\n                       <IconButton onClick={() => props.handle(props.company) }> {props.children} </IconButton>\n                   }\n                   title={props.company.name}\n                   subheader={\"Contact info: \" + props.company.email}/>\n               </Card>\n        </div>\n    );\n}\n\nexport default CompanyCard;\n","import { Button, Card, CardHeader, IconButton } from \"@material-ui/core\";\nimport { Delete } from \"@material-ui/icons\";\nimport { useEffect, useState } from \"react\";\nimport { useHistory } from \"react-router\";\nimport { NavLink } from \"react-router-dom\";\nimport CompanyModel from \"../../../../Models/CompanyModel\";\nimport { ClientType } from \"../../../../Models/UserModel\";\nimport { companiesDownloadedAction, companyDeletedAction } from \"../../../../Redux/CompanyState\";\nimport store from \"../../../../Redux/Store\";\nimport globals from \"../../../../Services/Globals\";\nimport jwtAxios from \"../../../../Services/jwtAxios\";\nimport notify from \"../../../../Services/Notifications\";\nimport CompanyCard from \"../CompanyCard/CompanyCard\";\n\n/**\n * Displays all companies and allows deleting any of them.\n */\nfunction DeleteCompany(): JSX.Element {\n    let history = useHistory();\n    let [companies, setCompanies] = useState<CompanyModel[]>(store.getState().companyState.companies);\n\n    /**\n     * Passed on to the company card. Deletes the company from the database and updates the companiesState.\n     * @param company \n     */\n    let handleDelete = async (company: CompanyModel) => {\n        try {\n            await jwtAxios.delete<number>(globals.urls.deleteCompanies + company.id);\n            store.dispatch(companyDeletedAction(company));\n            notify.success(\"Company \" + company.name + \" deleted.\");\n            history.push(\"/admin/delete/company\");\n        } catch (error) {\n            notify.error(error);\n        }\n        \n    }\n    /**\n     * Gets all the companies from the database and dispatches them to the store.\n     */\n    async function getCompanies() {\n        try {\n            let response = await jwtAxios.get<CompanyModel[]>(globals.urls.getCompanies);\n            store.dispatch(companiesDownloadedAction(response.data));\n        } catch (error) {\n            notify.error(error);\n        }\n    }\n    useEffect(() => {\n        let unSubscribeMe = store.subscribe(() => {\n            setCompanies(store.getState().companyState.companies);\n        })\n        if (store.getState().authState.user?.clientType !== ClientType.ADMINISTRATOR) {\n            notify.error(\"Pleas log in\");\n            history.push(\"/login/admin\");\n        }\n        // If the companyState is somehow empty, gets the companies from the database\n        else if(store.getState().companyState.companies.length === 0 ) {\n            getCompanies();\n        }\n        return function cleanup() {\n            unSubscribeMe();\n        }\n    },[]);\n    return (\n        <div className=\"DeleteCompany ScrollerDowner\">\n            {console.log(store.getState().companyState.companies)}\n            {companies.map(company => ( <CompanyCard key={company.id} company={company} handle={handleDelete} children={<Delete/>}/>\n                ))}\n                <br/>\n            <br/>\n            <NavLink to=\"/administrator/display\">\n                <Button variant=\"contained\" color=\"primary\"> Back</Button>\n            </NavLink>\n\n        </div>\n    );\n}\n\nexport default DeleteCompany;\n","import { Card, CardHeader, IconButton } from \"@material-ui/core\";\nimport { ReactNode } from \"react\";\nimport CustomerModel from \"../../../../Models/CustomerModel\";\nimport \"./CustomerCard.css\";\n\ninterface CustomerCardProps {\n\tcustomer: CustomerModel;\n    children: ReactNode;\n    handle: Function;\n}\n\nfunction CustomerCard(props: CustomerCardProps): JSX.Element {\n    return (\n        <div className=\"CustomerCard\">\n\t\t\t<Card key={props.customer.id}>\n                   <CardHeader action= {\n                       <IconButton onClick={() => props.handle(props.customer)\n                       }> {props.children} </IconButton>\n                   }\n                   title={props.customer.firstName + \" \" + props.customer.lastName} \n                   subheader={\"Contact info: \" + props.customer.email}/>\n               </Card>\n        </div>\n    );\n}\n\nexport default CustomerCard;\n","import { Button } from \"@material-ui/core\";\nimport { Delete, Unsubscribe } from \"@material-ui/icons\";\nimport { useEffect, useState } from \"react\";\nimport { useHistory } from \"react-router\";\nimport { NavLink } from \"react-router-dom\";\nimport CustomerModel from \"../../../../Models/CustomerModel\";\nimport { ClientType } from \"../../../../Models/UserModel\";\nimport { customerDeletedAction, customersDownloadedAction } from \"../../../../Redux/CustomersState\";\nimport store from \"../../../../Redux/Store\";\nimport globals from \"../../../../Services/Globals\";\nimport jwtAxios from \"../../../../Services/jwtAxios\";\nimport notify from \"../../../../Services/Notifications\";\nimport CustomerCard from \"../CustomerCard/CustomerCard\";\nimport \"./DeleteCustomer.css\";\n\n/**\n * Displays all customers and allows deleting any of them.\n */\nfunction DeleteCustomer(): JSX.Element {\n    let history = useHistory();\n    let [customers, setCustomers] = useState<CustomerModel[]>(store.getState().customerState.customers);\n\n    /**\n     * Passed on to the customer card. Deletes the customer from the database and updates the customersState.\n     * @param company \n     */\n    let handleDelete = async (customer: CustomerModel) => {\n        await jwtAxios.delete<number>(globals.urls.deleteCustomer + customer.id);\n        store.dispatch(customerDeletedAction(customer));\n        notify.success(\"Customer \" + customer.firstName + \" \" + customer.lastName + \" has been deleted.\");\n        history.push(\"/admin/delete/customer\");\n    }\n\n    /**\n     * Gets all the companies from the database and dispatches them to the store.\n     */\n    async function getCustomers() {\n        try {\n            let response = await jwtAxios.get<CustomerModel[]>(globals.urls.getCustomers);\n            store.dispatch(customersDownloadedAction(response.data));\n        } catch (error) {\n            notify.error(error);\n        }\n    }\n    useEffect(() => {\n        let unSubscribeMe = store.subscribe(() => {\n            setCustomers(store.getState().customerState.customers);\n        })\n        if (store.getState().authState.user?.clientType !== ClientType.ADMINISTRATOR) {\n            notify.error(\"Pleas log in\");\n            history.push(\"/login/admin\");\n        }\n           // If the companyState is somehow empty, gets the companies from the database\n        else if (store.getState().customerState.customers.length === 0) {\n            getCustomers();\n        }\n        return function cleanup() {\n            unSubscribeMe();\n        }\n    }, [])\n    return (\n        <div className=\"DeleteCustomer ScrollerDowner\">\n\t\t\t{customers.map(customerToDelete => (<CustomerCard key={customerToDelete.id} customer={customerToDelete} handle={handleDelete} children={<Delete/>}/>))}\n            <br/>\n            <br/>\n            <NavLink to=\"/administrator/display\">\n                <Button variant=\"contained\" color=\"primary\"> Back</Button>\n            </NavLink>\n        </div>\n    );\n}\n\nexport default DeleteCustomer;\n","import { Button } from \"@material-ui/core\";\nimport { Build } from \"@material-ui/icons\";\nimport { useEffect, useState } from \"react\";\nimport { useHistory } from \"react-router\";\nimport { NavLink } from \"react-router-dom\";\nimport CompanyModel from \"../../../../Models/CompanyModel\";\nimport { ClientType } from \"../../../../Models/UserModel\";\nimport { companiesDownloadedAction, CompanyAction, companyUpdatedAction } from \"../../../../Redux/CompanyState\";\nimport store from \"../../../../Redux/Store\";\nimport globals from \"../../../../Services/Globals\";\nimport jwtAxios from \"../../../../Services/jwtAxios\";\nimport notify from \"../../../../Services/Notifications\";\nimport CompanyCard from \"../CompanyCard/CompanyCard\";\nimport \"./UpdateCompany.css\";\n\ninterface UpdateCompanyProps {\n    company: CompanyModel;\n}\n/**\n * Displays all companies and allows updating any of them.\n */\nfunction UpdateCompany(props: UpdateCompanyProps): JSX.Element {\n    let history = useHistory();\n    let [companies, setCompanies] = useState<CompanyModel[]>(store.getState().companyState.companies);\n\n        let goToForm = (company: CompanyModel) => {\n            history.push(\"/admin/update/company/\" + company.id);\n        }\n\n    /**\n     * Gets all the companies from the database and dispatches them to the store.\n     */\n    async function getCompanies() {\n        try {\n            let response = await jwtAxios.get<CompanyModel[]>(globals.urls.getCompanies);\n            store.dispatch(companiesDownloadedAction(response.data));\n        } catch (error) {\n            notify.error(error);\n        }\n    }\n    useEffect(() => {\n        let unSubscribeMe = store.subscribe(() => {\n            setCompanies(store.getState().companyState.companies);\n        })\n        if (store.getState().authState.user?.clientType !== ClientType.ADMINISTRATOR) {\n            notify.error(\"Please log in\");\n            history.push(\"/login/admin\");\n        }\n         // If the companyState is somehow empty, gets the companies from the database\n        else if (store.getState().companyState.companies.length === 0) {\n            getCompanies();\n        }\n        return function cleanup() {unSubscribeMe();}\n    }, []);\n    return (\n        <div className=\"UpdateCompany ScrollerDowner\">\n            {console.log(store.getState().companyState.companies)}\n            {companies.map(comp => (<CompanyCard key={comp.id} company={comp} handle={goToForm} children={<Build/>} />\n            ))}\n\n            <br />\n            <NavLink to=\"/administrator/display\">\n                <Button variant=\"contained\" color=\"primary\"> Back</Button>\n            </NavLink>\n        </div>\n    );\n}\n\nexport default UpdateCompany;\n","import { Button, FormControl, FormHelperText, Input, InputLabel, makeStyles, Typography, IconButton } from \"@material-ui/core\";\nimport  VisibilityIcon  from \"@material-ui/icons/Visibility\";\nimport { ChangeEvent, useEffect, useState } from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport { RouteComponentProps, useHistory } from \"react-router\";\nimport { NavLink } from \"react-router-dom\";\nimport CompanyModel from \"../../../../Models/CompanyModel\";\nimport { ClientType } from \"../../../../Models/UserModel\";\nimport { companyUpdatedAction } from \"../../../../Redux/CompanyState\";\nimport store from \"../../../../Redux/Store\";\nimport globals from \"../../../../Services/Globals\";\nimport jwtAxios from \"../../../../Services/jwtAxios\";\nimport notify from \"../../../../Services/Notifications\";\nimport \"./UpdateCompanyForm.css\";\n\ninterface RouteParams {\n    id: string;\n}\ninterface UpdateCompanyFormProps extends RouteComponentProps<RouteParams> { }\n\nconst useStyles = makeStyles({\n    root:{\n        position: \"absolute\",\n        right: \"2%\",\n        top: \"23%\",\n        \"&:hover\":{\n            backgroundColor:\"transparent\"\n        }\n    }\n})\n\n/**\n * Displays a form to update the selected company. Only changed values will be updated.\n */\nfunction UpdateCompanyForm(props: UpdateCompanyFormProps): JSX.Element {\n    const classes = useStyles();\n    let [passwordShown, setPasswordShown] = useState(false);\n    let [company, setCompany] = useState<CompanyModel>(() => store.getState().companyState.companies.find((c) => (\n        c.id === parseInt(props.match.params.id))));\n    let { handleSubmit, register } = useForm<CompanyModel>();\n    const history = useHistory();\n\n    const togglePasswordVisiblity = () => {\n        setPasswordShown(passwordShown ? false : true);\n      };\n\n\n    /**\n     * Checks if the values on the form have been changed. If they haven't, sets them to their current value. \n     * @param companyToUpdate \n     */\n    const checkIfChanged = (companyToUpdate: CompanyModel) => {\n        if (!companyToUpdate.email) { companyToUpdate.email = company.email; }\n        if (!companyToUpdate.password) { companyToUpdate.password = company.password; }\n    }\n\n    /**\n     * Sets the values and id and name to their current values, checks if the other values have been changed, \n     * and then sends the company to the server to be updated.\n     * @param companyToUpdate \n     */\n    const handleUpdate = async (companyToUpdate: CompanyModel) => {\n        try {\n            companyToUpdate.id = company.id;\n            companyToUpdate.name = company.name;\n            checkIfChanged(companyToUpdate);\n            let response = await jwtAxios.put<CompanyModel>(globals.urls.updateCompany, companyToUpdate);\n            let updatedCompany = response.data;\n            console.log(updatedCompany);\n            store.dispatch(companyUpdatedAction(updatedCompany));\n            notify.success(\"Company\" + company.name + \" has been updated updated\");\n            history.push(\"/admin/update/company\")\n        } catch (error) {\n            notify.error(error);\n        }\n    }\n\n    useEffect(() => {\n        if (store.getState().authState.user?.clientType !== ClientType.ADMINISTRATOR) {\n            notify.error(\"Please log in\");\n            history.push(\"/login/admin\")\n\n            // Insures a refresh does not crash the site by using a local storage\n        } else if (company === undefined) {\n            // downloads from local storage \n                let storageCompany = localStorage.getItem(\"storage-company\");\n                if (storageCompany !== 'undefined' && storageCompany !== 'null') {\n                    setCompany(JSON.parse(storageCompany));\n                }\n            } else {\n                // sends to local storage\n                localStorage.setItem(\"storage-company\", JSON.stringify(company));\n        }\n\n\n    })\n    return (\n        <div className=\"UpdateCompanyForm\">\n            <Typography variant=\"h5\">Update Company</Typography>\n\n            <div className=\"updateForm\">\n            { company && \n                <form onSubmit={handleSubmit(handleUpdate)} >\n                    <br />\n                    <FormControl>\n                        <InputLabel >Company Email</InputLabel>\n                        <Input id=\"email\" defaultValue={company.email} type=\"email\"  {...register(\"email\")} />\n                    </FormControl>\n                    <br />\n                    <FormControl>\n                        <InputLabel >Company Password</InputLabel>\n                        <Input id=\"password\" defaultValue={company.password} inputProps={{minLength: 3,  maxLength: 15}} type={passwordShown ? \"text\" : \"password\"}\n                            {...register(\"password\")} />\n                        <IconButton className={classes.root} onClick={togglePasswordVisiblity}>{<VisibilityIcon />}</IconButton>\n                    </FormControl>\n                    <br />\n                    <br />\n                    <Button type=\"submit\" variant=\"contained\" color=\"primary\">   Update </Button>\n                    <NavLink to=\"/admin/update/company\">\n                        <Button variant=\"contained\">Back &nbsp;  </Button>\n                    </NavLink>\n                </form>\n            }\n            </div>\n        </div>\n    );\n}\n\nexport default UpdateCompanyForm;\n","import { Button } from \"@material-ui/core\";\nimport { Build, SettingsBackupRestoreSharp } from \"@material-ui/icons\";\nimport { useEffect, useState } from \"react\";\nimport { useHistory } from \"react-router\";\nimport { NavLink } from \"react-router-dom\";\nimport CustomerModel from \"../../../../Models/CustomerModel\";\nimport { ClientType } from \"../../../../Models/UserModel\";\nimport { customersDownloadedAction } from \"../../../../Redux/CustomersState\";\nimport store from \"../../../../Redux/Store\";\nimport globals from \"../../../../Services/Globals\";\nimport jwtAxios from \"../../../../Services/jwtAxios\";\nimport notify from \"../../../../Services/Notifications\";\nimport CompanyCard from \"../CompanyCard/CompanyCard\";\nimport CustomerCard from \"../CustomerCard/CustomerCard\";\nimport \"./UpdateCustomer.css\";\n\ninterface UpdateCustomerProps {\n    customer: CustomerModel;\n}\n\n/**\n * Displays all customers and allows updating any of them.\n */\nfunction UpdateCustomer(props: UpdateCustomerProps): JSX.Element {\n    let history = useHistory();\n    let [customers, setCustomers] = useState<CustomerModel[]>(store.getState().customerState.customers);\n\n    let goToForm = (customer: CustomerModel) => {\n        history.push(\"/admin/update/customer/\" + customer.id);\n    }\n\n    /**\n    * Gets all the customers from the database and dispatches them to the store.\n    */\n    async function getCustomers() {\n        try {\n            let response = await jwtAxios.get<CustomerModel[]>(globals.urls.getCustomers);\n            store.dispatch(customersDownloadedAction(response.data));\n        } catch (error) {\n            notify.error(error);\n        }\n    }\n    useEffect(() => {\n        let unSubscribeMe = store.subscribe(() => {\n            setCustomers(store.getState().customerState.customers);\n        })\n        if (store.getState().authState.user?.clientType !== ClientType.ADMINISTRATOR) {\n            notify.error(\"Please log in\")\n            history.push(\"/login/admin\");\n        }\n        // If the companyState is somehow empty, gets the companies from the database\n        else if (store.getState().customerState.customers.length === 0) {\n            getCustomers();\n        }\n        return function cleanup() {\n            unSubscribeMe();\n        }\n    }, [])\n    return (\n        <div className=\"UpdateCustomer ScrollerDowner\">\n            {customers.map(c => <CustomerCard key={c.id} customer={c} handle={goToForm} children={<Build />} />\n            )}\n            <br />\n            <NavLink to=\"/administrator/display\">\n                <Button variant=\"contained\" color=\"primary\"> Back</Button>\n            </NavLink>\n        </div>\n    );\n}\n\nexport default UpdateCustomer;\n","import { Button, FormControl, FormHelperText, Input, InputLabel, makeStyles, Typography, IconButton } from \"@material-ui/core\";\nimport { Add, ArrowBack } from \"@material-ui/icons\";\nimport { useEffect, useState } from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport { RouteComponentProps, useHistory } from \"react-router\";\nimport { NavLink } from \"react-router-dom\";\nimport CustomerModel from \"../../../../Models/CustomerModel\";\nimport { ClientType } from \"../../../../Models/UserModel\";\nimport VisibilityIcon from \"@material-ui/icons/Visibility\";\nimport { customerUpdatedAction } from \"../../../../Redux/CustomersState\";\nimport store from \"../../../../Redux/Store\";\nimport globals from \"../../../../Services/Globals\";\nimport jwtAxios from \"../../../../Services/jwtAxios\";\nimport notify from \"../../../../Services/Notifications\";\nimport \"./UpdateCustomerForm.css\";\n\ninterface RouteParams {\n    id: string;\n}\n\ninterface UpdateCustomerFormProps extends RouteComponentProps<RouteParams> { }\n\nconst useStyles = makeStyles({\n    root: {\n        position: \"absolute\",\n        left: \"82%\",\n        top: \"15%\",\n        \"&:hover\": {\n            backgroundColor: \"transparent\"\n        }\n    }\n})\n\n/**\n * Displays a form to update the selected customer. Only changed values will be updated.\n */\nfunction UpdateCustomerForm(props: UpdateCustomerFormProps): JSX.Element {\n    let [customer, setCustomer] = useState<CustomerModel>(() => store.getState().customerState.customers.find((c) => (\n        c.id === parseInt(props.match.params.id))));\n    let [passwordShown, setPasswordShown] = useState(false);\n    let { handleSubmit, register } = useForm<CustomerModel>();\n    let history = useHistory();\n    const classes = useStyles();\n\n    let togglePasswordVisiblity = () => {\n        setPasswordShown(passwordShown ? false : true);\n    };\n\n    /**\n     * Checks if the values on the form have been changed. If they haven't, sets them to their current value. \n     * @param customerToUpdate \n     */\n    let checkIfChanged = (customerToUpdate: CustomerModel) => {\n        if (!customerToUpdate.firstName) { customerToUpdate.firstName = customer.firstName; }\n        if (!customerToUpdate.lastName) { customerToUpdate.lastName = customer.lastName; }\n        if (!customerToUpdate.email) { customerToUpdate.email = customer.email; }\n        if (!customerToUpdate.password) { customerToUpdate.password = customer.password; }\n    }\n\n    /**\n    * Sets the value and id to its current value, checks if the other values have been changed, \n    * and then sends the company to the server to be updated.\n    * @param customerToUpdate \n    */\n    let handleUpdate = async (customerToUpdate: CustomerModel) => {\n        try {\n            customerToUpdate.id = customer.id;\n            checkIfChanged(customerToUpdate);\n            let response = await jwtAxios.put<CustomerModel>(globals.urls.updateCustomer, customerToUpdate);\n            let updatedCustomer = response.data;\n            store.dispatch(customerUpdatedAction(updatedCustomer));\n            notify.success(\"Customer \" + updatedCustomer.firstName + \" \" + updatedCustomer.lastName + \" has been updated\")\n            history.push(\"/administrator/display\");\n        } catch (error) {\n            notify.error(error);\n        }\n    }\n    useEffect(() => {\n        if (store.getState().authState.user?.clientType !== ClientType.ADMINISTRATOR) {\n            notify.error(\"Please log in\");\n            history.push(\"/login/admin\")\n            // Insures a refresh does not crash the site by using a local storage\n        } else if (customer === undefined) {\n            //      downloads from local storage\n            let storageCustomer = localStorage.getItem(\"storage-customer\");\n            if (storageCustomer !== 'undefined' && storageCustomer !== 'null') {\n                setCustomer(JSON.parse(storageCustomer));\n            }\n        } else {\n            // sends to local storage\n            localStorage.setItem(\"storage-customer\", JSON.stringify(customer));\n        }\n\n    })\n    return (\n        <div className=\"UpdateCustomerForm\">\n\n            <div className=\"updateForm\">\n                {customer &&\n                    <form onSubmit={handleSubmit(handleUpdate)} >\n                        <Typography variant=\"h6\">Update Customer</Typography>\n                        <br />\n                        <FormControl>\n                            <InputLabel >Customer First Name</InputLabel>\n                            <Input id=\"firstName\" defaultValue={customer.firstName} type=\"text\"  {...register(\"firstName\")} inputProps={{ minLength: 3, maxLength: 20 }} required />\n                        </FormControl>\n                        <br />\n                        <FormControl>\n                            <InputLabel >Customer Last Name</InputLabel>\n                            <Input id=\"lastName\" defaultValue={customer.lastName} type=\"text\"  {...register(\"lastName\")} inputProps={{ minLength: 3, maxLength: 20 }} required />\n                        </FormControl>\n                        <br />\n                        <FormControl>\n                            <InputLabel >Customer Email</InputLabel>\n                            <Input id=\"email\" defaultValue={customer.email} type=\"email\"  {...register(\"email\")} required />\n                        </FormControl>\n                        <br />\n                        <FormControl>\n                            <InputLabel >Company Password</InputLabel>\n                            <Input id=\"password\" defaultValue={customer.password} type={passwordShown ? \"text\" : \"password\"} {...register(\"password\")} inputProps={{ minLength: 3, maxLength: 15 }} required />\n                            <IconButton className={classes.root} onClick={togglePasswordVisiblity}>{<VisibilityIcon />}</IconButton>\n                        </FormControl>\n                        <br />\n                        <br />\n                        <Button type=\"submit\" variant=\"contained\" color=\"primary\">   Update &nbsp;<Add /> </Button>\n                        <NavLink to=\"/administrator/display\">\n                            <Button variant=\"contained\">Back &nbsp; <ArrowBack /> </Button>\n                        </NavLink>\n                    </form>\n                }\n            </div>\n        </div>\n    );\n}\n\nexport default UpdateCustomerForm;\n","import CompanyModel from \"./CompanyModel\";\r\n\r\nclass CouponModel {\r\n    public id: number;\r\n    public category: Category;\r\n    public title: string;\r\n    public description: string;\r\n    public startDate: Date;\r\n    public endDate: Date;\r\n    public amount: number;\r\n    public price: number;\r\n    public company: CompanyModel;\r\n    public image: FileList; \r\n    public imageName: string;\r\n    public token: string;\r\n}\r\nexport enum Category {\r\n    FOOD = \"FOOD\", ELECTRICITY = \"ELECTRICITY\", RESTAURANT = \"RESTAURANT\", VACATION = \"VACATION\",\r\n    HYGIENE_PRODUCTS = \"HYGIENE_PRODUCTS\", TRANSPORT = \"TRANSPORT\", MAGIC = \"MAGIC\"\r\n}\r\n\r\nexport default CouponModel;","import { Button, FormControl, FormHelperText, Input, TextField, InputLabel, makeStyles, MenuItem, Select, Typography } from \"@material-ui/core\";\nimport { Add, ArrowBack } from \"@material-ui/icons\";\nimport axios from \"axios\";\nimport { kMaxLength } from \"buffer\";\nimport { useEffect, useState } from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport { useHistory } from \"react-router\";\nimport { NavLink } from \"react-router-dom\";\nimport CouponModel, { Category } from \"../../../../Models/CouponModel\";\nimport { ClientType } from \"../../../../Models/UserModel\";\nimport { couponAddedAction } from \"../../../../Redux/CouponsState\";\nimport store from \"../../../../Redux/Store\";\nimport globals from \"../../../../Services/Globals\";\nimport jwtAxios from \"../../../../Services/jwtAxios\";\nimport notify from \"../../../../Services/Notifications\";\nimport \"./AddCoupon.css\";\n\nconst useStyles = makeStyles((theme) => ({\n    form: {\n        margin: theme.spacing(1),\n        minWidth: 200\n    }\n}))\n\n\n/**\n * /**\n * Displays a form which allows the company to add a coupon. \n */\nfunction AddCoupon(): JSX.Element {\n    let { handleSubmit, register } = useForm<CouponModel>();\n    const [value, setValue] = useState('');\n    let history = useHistory();\n    const classes = useStyles();\n\n    const handleChange = (event: React.ChangeEvent<{ value: unknown }>) => {\n        setValue(event.target.value as Category);\n    };\n\n    useEffect(() => {\n        if (store.getState().authState.user?.clientType !== ClientType.COMPANY) {\n            notify.error(\"Please log in\");\n            history.push(\"/login/company\")\n        }\n    })\n\n    /**\n     * Receives the coupon data from the form. The function then sends the coupon\n     *  as FormData to the server.\n     * @param coupon \n     */\n    async function send(coupon: CouponModel) {\n        try {\n\n            const imgBBFormData = new FormData();\n            imgBBFormData.append(\"image\", coupon.image.item(0))\n            imgBBFormData.set(\"key\", \"e72e6d0eb6fac509647b1faa2b4c6bcb\")\n            let imgResponse = await axios.post(\"https://api.imgbb.com/1/upload\", imgBBFormData);\n            let imgURL = imgResponse.data[\"data\"][\"display_url\"];\n            console.log(imgURL);\n            \n        \n            const myFormData = new FormData();\n            myFormData.append(\"amount\", coupon.amount.toString());\n            myFormData.append(\"category\", coupon.category.toString());\n            myFormData.append(\"description\", coupon.description);\n            myFormData.append(\"stringEndDate\", new Date(coupon.endDate).toISOString().split(\"T\")[0]);\n            myFormData.append(\"price\", coupon.price.toString());\n            myFormData.append(\"stringStartDate\", new Date(coupon.startDate).toISOString().split(\"T\")[0]);\n            myFormData.append(\"title\", coupon.title);\n            myFormData.append(\"imageName\", imgURL);\n\n            let response = await jwtAxios.post<CouponModel>(globals.urls.addCoupon, myFormData);\n            let addedCoupon = response.data;\n            \n            store.dispatch(couponAddedAction(addedCoupon));\n            notify.success(\"Coupon \" + coupon.title + \"  added.\");\n            // in order to give the picture time to be downloaded\n            setTimeout(() => {\n                history.push(\"/company/display\");\n            }, 1500);\n        } catch (error) {\n            notify.error(error);\n        }\n    }\n    return (\n        <div className=\"AddCoupon\">\n            <form title=\"Add a Customer\" encType=\"multipart/form-data\"\n                onSubmit={handleSubmit(send)} >\n                <Typography variant=\"h6\">Add a Coupon</Typography>\n                <FormControl>\n                    <InputLabel>Coupon Title</InputLabel>\n                    <Input required id=\"title\" {...register(\"title\")} inputProps={{ maxLength: 20 }} />\n                </FormControl>\n                <br />\n                <FormControl className={classes.form}>\n                    <InputLabel>Coupon Category</InputLabel>\n                    <Select\n                        {...register(\"category\")}\n                        labelId=\"labelIdCategories\"\n                        id=\"categoriesId\"\n                        value={value}\n                        required\n                        onChange={handleChange} >\n                        <MenuItem value={Category.FOOD} >Food</MenuItem>\n                        <MenuItem value={Category.ELECTRICITY} >Electricity</MenuItem>\n                        <MenuItem value={Category.RESTAURANT} >Restaurant</MenuItem>\n                        <MenuItem value={Category.VACATION} >Vacation</MenuItem>\n                        <MenuItem value={Category.HYGIENE_PRODUCTS} >Hygiene Products</MenuItem>\n                        <MenuItem value={Category.TRANSPORT} >Transport</MenuItem>\n                        <MenuItem value={Category.MAGIC} >Magic</MenuItem>\n                    </Select>\n                </FormControl>\n                <br />\n                <FormControl>\n                    <InputLabel >Coupon Description</InputLabel>\n                    <Input id=\"description\" required {...register(\"description\")} />\n                </FormControl>\n                <br />\n                <FormControl className={classes.form}>\n                    <InputLabel shrink>Coupon Start Date</InputLabel>\n                    <Input id=\"startDate\" type=\"date\" required fullWidth {...register(\"startDate\")} />\n                </FormControl>\n                <br />\n                <FormControl className={classes.form}>\n                    <InputLabel shrink >Coupon End Date</InputLabel>\n                    <Input id=\"endDate\" type=\"date\" required fullWidth {...register(\"endDate\")} />\n                </FormControl>\n                <br />\n                <FormControl>\n                    <InputLabel >Coupon Amount</InputLabel>\n                    <Input id=\"amount\" type=\"number\" inputProps={{min: 1}} required {...register(\"amount\")} />\n                </FormControl>\n                <br />\n                <FormControl>\n                    <InputLabel >Coupon Price</InputLabel>\n                    <Input id=\"price\" type=\"number\" inputProps={{min: 0, step: \"0.01\"}} required  {...register(\"price\")} />\n                </FormControl>\n                <br />\n                <FormControl>\n                    <br />\n                    <Button\n                        variant=\"contained\"\n                        component=\"label\">\n                        Upload Image\n                        <input hidden type=\"file\" name=\"image\" {...register('image')} accept=\"image/*\" />\n                    </Button>\n\n                </FormControl>\n                <br />\n                <br />\n                <Button type=\"submit\" variant=\"contained\" color=\"primary\">   Add &nbsp;<Add /> </Button>\n                <NavLink to=\"/company/display\">\n                    <Button variant=\"contained\">Back &nbsp; <ArrowBack /> </Button>\n                </NavLink>\n            </form>\n        </div >\n    );\n}\n\nexport default AddCoupon;\n","import { Home } from \"@material-ui/icons\";\nimport { useEffect, useState } from \"react\";\nimport { NavLink, useHistory } from \"react-router-dom\";\nimport { Button, FormControl, FormHelperText, Input, InputLabel, makeStyles, MenuItem, Select, Typography } from \"@material-ui/core\";\nimport CouponModel, { Category } from \"../../../../Models/CouponModel\";\nimport { ClientType } from \"../../../../Models/UserModel\";\nimport { couponDeletedAction, couponsDowloadedAction as couponsDownloadedAction } from \"../../../../Redux/CouponsState\";\nimport store from \"../../../../Redux/Store\";\nimport globals from \"../../../../Services/Globals\";\nimport jwtAxios from \"../../../../Services/jwtAxios\";\nimport notify from \"../../../../Services/Notifications\";\nimport CouponCard from \"../../../CouponsArea/CouponCard/CouponCard\";\nimport OperationCard from \"../../OperationCard/OperationCard\";\nimport \"./CompanyDisplay.css\";\nimport { useForm } from \"react-hook-form\";\n\nconst useStyles = makeStyles((theme) => ({\n    form: {\n        margin: theme.spacing(1),\n        minWidth: 200\n    }\n}))\n\n/**\n * Displays the company coupons and the available operations for each coupon. \n */\nfunction CompanyDisplay(): JSX.Element {\n    type filterDetails = { category: Category, maxPrice: number };\n    let history = useHistory();\n    let [coupons, setCoupons] = useState<CouponModel[]>();\n    let [couponsFetched, setCouponsFetched] = useState<boolean>(false);\n    let [categoryValue, setCategoryValue] = useState(null);\n    let [priceValue, setPriceValue] = useState(null);\n    let [details, setDetails] = useState<filterDetails>(null);\n    const { handleSubmit, register } = useForm<filterDetails>();\n    const classes = useStyles();\n\n    const send = (filter: filterDetails) => {\n        setDetails(filter);\n    };\n\n    const clearFilter = () => {\n        setDetails(null);\n        setCategoryValue(null)\n        setPriceValue(null)\n    };\n\n    const handleCategoryChange = (event: React.ChangeEvent<{ value: unknown }>) => {\n        setCategoryValue(event.target.value as Category);\n    };\n    const handlePriceChange = (event: React.ChangeEvent<{ value: unknown }>) => {\n        setPriceValue(event.target.value as number);\n    };\n\n    /**\n     * Deletes the selected coupon by sending the coupon id to the server and updates the store.\n     * @param coupon \n     */\n    let handleDelete = async (coupon: CouponModel) => {\n        try {\n            await jwtAxios.delete<number>(globals.urls.deleteCoupon + coupon.id);\n            store.dispatch(couponDeletedAction(coupon));\n            notify.success(\"Coupon \" + coupon.title + \" deleted.\");\n            history.push(\"/company/display\");\n        } catch (error) {\n            notify.error(error);\n        }\n    }\n\n    let goToUpdateForm = (id: string) => {\n        history.push(\"/company/update/coupon/\" + id)\n    }\n\n    /**\n     * Filters the coupons based on the details from the filter form: category and max price.\n     * @returns CouponModel[]\n     */\n    const showCoupons = (): CouponModel[] => {\n        let filteredCoupons = coupons;\n        if (details?.category !== undefined && details?.maxPrice !== undefined) {\n            filteredCoupons = filteredCoupons.filter((c) =>\n                (c.price <= details.maxPrice && c.category === details.category))\n        }\n        return filteredCoupons;\n    }\n\n    /**\n     * Gets all the company coupons from the database and dispatches them to the store.\n     * Sets the couponsFetched flag to true in order to insure the method works only once on the first render.\n     */\n    async function getCoupons() {\n        try {\n            let response = await jwtAxios.get<CouponModel[]>(globals.urls.getCompanyCoupons);\n            store.dispatch(couponsDownloadedAction(response.data));\n            setCouponsFetched(true)\n        } catch (error) {\n            notify.error(error);\n        }\n    }\n    useEffect(() => {\n        let unSubscribeMe = store.subscribe(() => {\n            setCoupons(store.getState().couponState.coupons);\n        });\n        if (store.getState().authState.user?.clientType !== ClientType.COMPANY) {\n            notify.error(\"Please log in\");\n            history.push(\"/login/company\");\n        } else if (!couponsFetched) {\n            getCoupons();\n        }\n        return function cleanup() { unSubscribeMe(); }\n    }, [])\n    return (\n        <div className=\"CompanyDisplay ScrollerDowner\">\n            <Typography variant=\"h4\" > {store.getState().authState.user.name}'s Coupons </Typography>\n            <NavLink className=\"addButton\" to=\"/company/add/coupon\"><OperationCard operation=\"Add Coupon\" /></NavLink>\n            <br />\n            <NavLink className=\"homeButton\" to=\"/home\">\n                <Button startIcon={<Home />} style={{ textTransform: \"none\" }} variant=\"contained\">Home</Button>\n            </NavLink>\n            <br />\n            <form className=\"filterForm\" onSubmit={handleSubmit(send)} >\n                <FormControl className={classes.form}>\n                    <InputLabel>Coupon Category</InputLabel>\n                    <Select\n                        {...register(\"category\")}\n                        required\n                        labelId=\"labelIdCategories\"\n                        id=\"categoriesId\"\n                        value={!categoryValue ? \"\" : categoryValue}\n                        onChange={handleCategoryChange} >\n                        <MenuItem value={null} >-</MenuItem>\n                        <MenuItem value={Category.FOOD} >Food</MenuItem>\n                        <MenuItem value={Category.ELECTRICITY} >Electricity</MenuItem>\n                        <MenuItem value={Category.RESTAURANT} >Restaurant</MenuItem>\n                        <MenuItem value={Category.VACATION} >Vacation</MenuItem>\n                        <MenuItem value={Category.HYGIENE_PRODUCTS} >Hygiene Products</MenuItem>\n                        <MenuItem value={Category.TRANSPORT} >Transport</MenuItem>\n                        <MenuItem value={Category.MAGIC} >Magic</MenuItem>\n                    </Select>\n                </FormControl> <br />\n                <FormControl>\n                    <InputLabel>Coupon Price</InputLabel>\n                    <Input id=\"price\" required type=\"number\" value={!priceValue ? \"\" : priceValue}  {...register(\"maxPrice\")} onChange={handlePriceChange} />\n                </FormControl>\n                <br />\n                <br />\n\n                <Button type=\"submit\" variant=\"contained\" size=\"small\" color=\"primary\">Filter &nbsp; </Button>\n                <Button onClick={clearFilter} variant=\"contained\" size=\"small\">Clear &nbsp;</Button>\n            </form>\n            {\n                coupons && showCoupons().filter((coup) => (\n                    //show only coupons that belong to this company via company id\n                    coup.company.id === store.getState().authState.user.id\n                )).map((coup) => (<CouponCard key={coup.id} coupon={coup} handleD={handleDelete} handleU={goToUpdateForm} />\n                ))}\n        </div>\n    );\n}\n\n\nexport default CompanyDisplay;\n","import { Button, FormControl, FormHelperText, Input, InputLabel, makeStyles, MenuItem, Select, Typography } from \"@material-ui/core\";\nimport { ArrowBack, Unsubscribe } from \"@material-ui/icons\";\nimport axios from \"axios\";\nimport { useEffect, useState } from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport { RouteComponentProps, useHistory } from \"react-router\";\nimport { NavLink } from \"react-router-dom\";\nimport CouponModel, { Category } from \"../../../../Models/CouponModel\";\nimport { ClientType } from \"../../../../Models/UserModel\";\nimport { couponUpdatedAction } from \"../../../../Redux/CouponsState\";\nimport store from \"../../../../Redux/Store\";\nimport globals from \"../../../../Services/Globals\";\nimport jwtAxios from \"../../../../Services/jwtAxios\";\nimport notify from \"../../../../Services/Notifications\";\nimport \"./UpdateCouponForm.css\";\n\ninterface RouteParams {\n    id: string;\n}\n\ninterface UpdateCouponFormProps extends RouteComponentProps<RouteParams> { }\n\nconst useStyles = makeStyles((theme) => ({\n    form: {\n        margin: theme.spacing(1),\n        minWidth: 200\n    }\n}))\n/**\n * Displays a form to update the selected coupon. Only changed values will be updated.\n */\nfunction UpdateCouponForm(props: UpdateCouponFormProps): JSX.Element {\n    let { handleSubmit, register } = useForm<CouponModel>();\n    const history = useHistory();\n    const [value, setValue] = useState('');\n    const classes = useStyles();\n    let [coupon, setCoupon] = useState<CouponModel>(() => store.getState().couponState.coupons.find((c) => (\n        c.id === +props.match.params.id)));\n        console.log(coupon);\n\n    const handleChange = (event: React.ChangeEvent<{ value: unknown }>) => {\n        setValue(event.target.value as Category);\n    };\n\n    /**\n     * If certain inputs were not filled out, set their values to their current values\n     * instead of them being erased.\n     * @param couponToUpdate \n     */\n    const checkIfChanged = (couponToUpdate: CouponModel) => {\n        if (!couponToUpdate.title?.trim()) { couponToUpdate.title = coupon.title; }\n        if (!couponToUpdate.amount) { couponToUpdate.amount = coupon.amount; }\n        if (!couponToUpdate.category) { couponToUpdate.category = coupon.category; }\n        if (!couponToUpdate.description) { couponToUpdate.description = coupon.description; }\n        if (!couponToUpdate.endDate) { couponToUpdate.endDate = coupon.endDate; }\n        if (!couponToUpdate.startDate) { couponToUpdate.startDate = coupon.startDate; }\n        if (!couponToUpdate.price) { couponToUpdate.price = coupon.price; }\n        if (!couponToUpdate.image?.item(0)) { couponToUpdate.imageName = coupon.imageName; }\n    }\n\n    /**\n     * Validates the dates before sending them to the server.\n     * @param couponToUpdate\n     * @returns true if dates are validated, false if they are not.\n     */\n    const valiDates = (couponToUpdate: CouponModel): boolean => {\n        if (couponToUpdate.startDate > couponToUpdate.endDate) {\n            notify.error('End Date cannot be before Start Date');\n            return false;\n        }\n        return true;\n    }\n\n    /**\n     * Receives the coupon data from the form. The function then makes sure that the \n     * fields are validated before sending the coupon to be updated as FormData to the server.\n     * @param couponToUpdate \n     */\n    const handleUpdate = async (couponToUpdate: CouponModel) => {\n        try {\n            \n            console.log(couponToUpdate);\n            \n            couponToUpdate.id = coupon.id;\n            couponToUpdate.company = coupon.company;\n            checkIfChanged(couponToUpdate);\n            if (!valiDates(couponToUpdate)) { return; }\n            let imgURL = coupon.imageName;\n            // upload image to imgBB only if an image was uploaded on the updateCouponForm.\n            if (couponToUpdate.image?.item(0)) {\n                const imgBBFormData = new FormData();\n                imgBBFormData.append(\"image\", couponToUpdate.image.item(0))\n                imgBBFormData.set(\"key\", \"e72e6d0eb6fac509647b1faa2b4c6bcb\")\n                let imgResponse = await axios.post(\"https://api.imgbb.com/1/upload\", imgBBFormData);\n                imgURL = imgResponse.data[\"data\"][\"display_url\"];\n                \n            }\n\n\n\n            const myFormData = new FormData();\n            myFormData.append(\"id\", couponToUpdate.id.toString());\n            myFormData.append(\"amount\", couponToUpdate.amount.toString());\n            myFormData.append(\"category\", couponToUpdate.category.toString());\n            myFormData.append(\"description\", couponToUpdate.description);\n            myFormData.append(\"stringEndDate\", new Date(couponToUpdate.endDate).toISOString().split(\"T\")[0]);\n            myFormData.append(\"price\", couponToUpdate.price.toString());\n            myFormData.append(\"stringStartDate\", new Date(couponToUpdate.startDate).toISOString().split(\"T\")[0]);\n            myFormData.append(\"title\", couponToUpdate.title);\n            myFormData.append(\"imageName\", imgURL);\n            \n\n            let response = await jwtAxios.put<CouponModel>(globals.urls.updateCoupon, myFormData);\n            let updatedCoupon = response.data;\n            store.dispatch(couponUpdatedAction(updatedCoupon));\n            localStorage.removeItem(\"storage-coupon\");\n            notify.success(\"Coupon \" + updatedCoupon.title + \" has been updated\");\n            setTimeout(() => {\n                history.push(\"/company/display\");\n            }, 1000);\n        } catch (error) {\n            notify.error(error);\n        }\n    }\n\n    useEffect(() => {\n        if (store.getState().authState.user?.clientType !== ClientType.COMPANY) {\n            notify.error(\"Please log in\");\n            history.push(\"/login/company\");\n        } else {\n            //      downloads from local storage\n            if (coupon === undefined) {\n                let storageCoupon = localStorage.getItem(\"storage-coupon\");\n                if (storageCoupon !== 'undefined' && storageCoupon !== 'null') {\n                    setCoupon(JSON.parse(storageCoupon));\n                }\n            } else {\n                // sends to local storage\n                localStorage.setItem(\"storage-coupon\", JSON.stringify(coupon));\n            }\n        }\n    })\n\n\n    return (\n        <div className=\"UpdateCouponForm\">\n            {coupon &&\n                <form title=\"Add a Customer\" onSubmit={handleSubmit(handleUpdate)} >\n                    <br />\n                    <Typography variant=\"h6\">Update a Coupon</Typography>\n                    <br />\n                    <FormControl>\n                        <InputLabel>Coupon Title</InputLabel>\n                        <Input id=\"title\" defaultValue={coupon.title} {...register(\"title\")} inputProps={{ maxLength: 20 }} />\n                    </FormControl>\n                    <br />\n                    <FormControl className={classes.form}>\n                        <InputLabel>Coupon Category</InputLabel>\n                        <Select\n                            {...register(\"category\")}\n                            labelId=\"labelIdCategories\"\n                            id=\"categoriesId\"\n                            value={!value ? coupon.category : value}\n                            onChange={handleChange} >\n                            <MenuItem value={Category.FOOD} >Food</MenuItem>\n                            <MenuItem value={Category.ELECTRICITY} >Electricity</MenuItem>\n                            <MenuItem value={Category.RESTAURANT} >Restaurant</MenuItem>\n                            <MenuItem value={Category.VACATION} >Vacation</MenuItem>\n                            <MenuItem value={Category.HYGIENE_PRODUCTS} >Hygiene Products</MenuItem>\n                            <MenuItem value={Category.TRANSPORT} >Transport</MenuItem>\n                            <MenuItem value={Category.MAGIC} >Magic</MenuItem>\n                        </Select>\n                    </FormControl>\n                    <br />\n                    <FormControl>\n                        <InputLabel >Coupon Description</InputLabel>\n                        <Input id=\"description\" {...register(\"description\")} />\n                    </FormControl>\n                    <br />\n                    <FormControl className={classes.form}>\n                        <InputLabel shrink>Coupon Start Date</InputLabel>\n                        <Input id=\"startDate\" defaultValue={coupon.startDate} type=\"date\" fullWidth {...register(\"startDate\")} />\n                    </FormControl>\n                    <br />\n                    <FormControl className={classes.form}>\n                        <InputLabel shrink>Coupon End Date</InputLabel>\n                        <Input id=\"endDate\" defaultValue={coupon.endDate} type=\"date\" fullWidth {...register(\"endDate\")} />\n                    </FormControl>\n                    <br />\n                    <FormControl>\n                        <InputLabel>Coupon Amount</InputLabel>\n                        <Input id=\"amount\" defaultValue={coupon.amount} type=\"number\" inputProps={{ min: 1 }} {...register(\"amount\")} />\n                    </FormControl>\n                    <br />\n                    <FormControl>\n                        <InputLabel>Coupon Price</InputLabel>\n                        <Input id=\"price\" defaultValue={coupon.price} type=\"number\" inputProps={{ min: 0, step: \"0.01\" }} {...register(\"price\")} />\n                    </FormControl>\n                    <br />\n                    <br />\n                    <Button\n                        variant=\"contained\"\n                        component=\"label\">\n                        Upload Image\n                        <input hidden type=\"file\" name=\"image\" {...register('image')} accept=\"image/*\" />\n                    </Button>\n                    <br />\n                    <br />\n                    <Button type=\"submit\" variant=\"contained\" color=\"primary\">   Update </Button>\n                    <NavLink to=\"/company/display\">\n                        <Button variant=\"contained\">Back &nbsp; <ArrowBack /> </Button>\n                    </NavLink>\n                </form>\n            }\n        </div>\n    );\n}\n\nexport default UpdateCouponForm;\n","import { NavLink, useHistory, useLocation } from \"react-router-dom\";\nimport { Button, FormControl, FormHelperText, Input, InputLabel, makeStyles, MenuItem, Select, Typography } from \"@material-ui/core\";\nimport { Filter3, Home } from \"@material-ui/icons\";\nimport \"./CustomerDisplay.css\";\nimport { useState } from \"react\";\nimport store from \"../../../../Redux/Store\";\nimport jwtAxios from \"../../../../Services/jwtAxios\";\nimport globals from \"../../../../Services/Globals\";\nimport { customerAddedAction, customersDownloadedAction } from \"../../../../Redux/CustomersState\";\nimport notify from \"../../../../Services/Notifications\";\nimport { useEffect } from \"react\";\nimport CouponCard from \"../../../CouponsArea/CouponCard/CouponCard\";\nimport CouponModel, { Category } from \"../../../../Models/CouponModel\";\nimport { ClientType } from \"../../../../Models/UserModel\";\nimport { useForm } from \"react-hook-form\";\nimport CustomerModel from \"../../../../Models/CustomerModel\";\nimport { couponAddedAction } from \"../../../../Redux/CouponsState\";\nimport { log } from \"console\";\n\nconst useStyles = makeStyles((theme) => ({\n    form: {\n        margin: theme.spacing(1),\n        minWidth: 200\n    }\n}))\n\n/**\n * Displays the coupons bought by the customer. \n */\nfunction CustomerDisplay(): JSX.Element {\n    type filterDetails = { category: Category, maxPrice: number };\n    let [customerFetched, setCustomerFetched] = useState<boolean>(false);\n    let [customer, setCustomer] = useState<CustomerModel>();\n    let [categoryValue, setCategoryValue] = useState(null);\n    let [priceValue, setPriceValue] = useState(null);\n    let [details, setDetails] = useState<filterDetails>(null);\n\n    const classes = useStyles();\n    const history = useHistory();\n    const location = useLocation();\n    const { handleSubmit, register } = useForm<filterDetails>();\n\n    /**\n     * Gets the customer details from the server, sets the customer state and dispatches them to the store. \n     * Also dispatches to the store all of the customer's coupons.\n     */\n    const getCustomer = async () => {\n        try {\n            let response = await jwtAxios.get<CustomerModel>(globals.urls.getCustomerDetails);\n            setCustomer(response.data);\n            store.dispatch(customerAddedAction(response.data));\n            customer?.coupons.forEach(coupon => {\n                store.dispatch(couponAddedAction(coupon))\n            });\n            setCustomerFetched(true) // insures the request is sent only once to the server\n        } catch (error) {\n            notify.error(error)\n        }\n    }\n\n    const send = (filter: filterDetails) => {\n        setDetails(filter);\n    };\n\n    const clearFilter = () => {\n        setDetails(null);\n        setCategoryValue(null)\n        setPriceValue(null)\n    };\n\n    \n    /**\n     *  Show coupons based on the filters the user filled in the form.\n     * @returns CouponModel[]\n     */\n    const showCoupons = (): CouponModel[] => {\n        let filteredCoupons = customer.coupons;\n        if (details?.category !== undefined && details?.maxPrice !== undefined) {\n            filteredCoupons = filteredCoupons.filter((c) =>\n                (c.price <= details.maxPrice && c.category === details.category))\n        }\n        return filteredCoupons;\n    }\n\n    const handleCategoryChange = (event: React.ChangeEvent<{ value: unknown }>) => {\n        setCategoryValue(event.target.value as Category);\n    };\n    const handlePriceChange = (event: React.ChangeEvent<{ value: unknown }>) => {\n        setPriceValue(event.target.value as number);\n    };\n\n\n    useEffect(() => {\n        if (store.getState().authState.user?.clientType !== ClientType.CUSTOMER) {\n            notify.error(\"Please log in\");\n            history.push(\"/login/company\");\n        } else if (!customerFetched) {\n            getCustomer();\n        }\n    }, [customer])\n    \n    return (\n        <div className=\"CustomerDisplay ScrollerDowner\">\n            <form id=\"myForm\" className=\"filterForm\" onSubmit={handleSubmit(send)} >\n                <FormControl className={classes.form}>\n                    <InputLabel>Coupon Category</InputLabel>\n                    <Select\n                        {...register(\"category\")}\n                        required\n                        labelId=\"labelIdCategories\"\n                        id=\"categoriesId\"\n                        value={!categoryValue ? \"\" : categoryValue}\n                        onChange={handleCategoryChange} >\n                        <MenuItem value={null} >-</MenuItem>\n                        <MenuItem value={Category.FOOD} >Food</MenuItem>\n                        <MenuItem value={Category.ELECTRICITY} >Electricity</MenuItem>\n                        <MenuItem value={Category.RESTAURANT} >Restaurant</MenuItem>\n                        <MenuItem value={Category.VACATION} >Vacation</MenuItem>\n                        <MenuItem value={Category.HYGIENE_PRODUCTS} >Hygiene Products</MenuItem>\n                        <MenuItem value={Category.TRANSPORT} >Transport</MenuItem>\n                        <MenuItem value={Category.MAGIC} >Magic</MenuItem>\n                    </Select>\n                </FormControl> <br />\n                <FormControl>\n                    <InputLabel>Coupon Price</InputLabel>\n                    <Input id=\"price\" required type=\"number\" value={!priceValue ? \"\" : priceValue}  {...register(\"maxPrice\")} onChange={handlePriceChange} />\n                    {/* <Input required id=\"price\" type=\"number\" value={!priceValue ? \"\" : priceValue} {...register('maxPrice')} onChange={handlePriceChange} /> */}\n\n                </FormControl>\n                <br />\n                <br />\n\n                <Button type=\"submit\" variant=\"contained\" size=\"small\" color=\"primary\">Filter &nbsp; </Button>\n                <Button onClick={clearFilter} variant=\"contained\" size=\"small\">Clear &nbsp;</Button>\n            </form>\n            <NavLink className=\"homeButton\" to=\"/home\">\n                <Button startIcon={<Home />} style={{ textTransform: \"none\" }} variant=\"contained\">Home</Button>\n            </NavLink>\n            <Typography variant=\"h4\" display=\"inline\"> {store.getState().authState.user.name}'s Coupons </Typography>\n            <br />\n            {customer?.coupons && showCoupons().map((c) =><CouponCard key={c.id} coupon={c} />)}\n            <br />\n        </div>\n    );\n}\n\nexport default CustomerDisplay;\n","import { Typography } from \"@material-ui/core\";\n\nfunction Page404(): JSX.Element {\n    return (\n        <div className=\"Page404\">\n            <br/>\n\t\t\t<Typography variant=\"h5\"> The address you have entered... we don't have it. </Typography>\n        </div>\n    );\n}\n\nexport default Page404;\n","import { ReactNode } from \"react\";\nimport { Category } from \"../../../Models/CouponModel\";\nimport { Card, CardHeader } from '@material-ui/core';\nimport globals from \"../../../Services/Globals\";\nimport \"./CategoryCard.css\";\n\ninterface CategoryCardProps {\n    category: Category;\n    children: ReactNode;\n}\n\n/**\n * Displays a card according to the category.\n * @param props \n * @returns \n */\nfunction CategoryCard(props: CategoryCardProps): JSX.Element {\n\n    /**\n     *  Manipulates a string, making each word begin with a capital letter followed by lower case letters.\n     * @param categoryName \n     * @returns string\n     */\n    function niceString(categoryName: string): string {\n        categoryName = categoryName.toLowerCase();\n        categoryName = categoryName.charAt(0).toUpperCase() + categoryName.slice(1);\n        categoryName = categoryName.replace('_', ' ')\n        let words = categoryName.split(' ');\n        for (let i = 0; i < words.length; i++) {\n            words[i] = words[i][0].toUpperCase() + words[i].substr(1);\n        }\n        return words.join(\" \");\n    }\n\n    return (\n        <div className=\"CategoryCard\">\n            <Card>\n                <CardHeader title={props.children} subheader={niceString(props.category)} />\n            </Card>\n\n\n        </div>\n    );\n}\n\nexport default CategoryCard;\n","import { Typography } from \"@material-ui/core\";\nimport { Bathtub, BlurOn, CardTravel, Commute, Fastfood, Kitchen, Power, Send } from \"@material-ui/icons\";\nimport { Component } from \"react\";\nimport { NavLink } from \"react-router-dom\";\nimport { Category } from \"../../../Models/CouponModel\";\nimport CategoryCard from \"../../CouponsArea/CategoryCard/CategoryCard\";\nimport \"./Home.css\";\n\n/**\n *  Displays category cards representing all available coupon categories.\n */\nclass Home extends Component {\n\n   public render(): JSX.Element {\n      return (\n            <div className=\"Home ScrollerDowner\">\n            <NavLink to={\"/coupons/category/\" + Category.ELECTRICITY}>\n                <CategoryCard category={Category.ELECTRICITY}>\n                 <Power/>\n                </CategoryCard>\n            </NavLink>\n            <NavLink to={\"/coupons/category/\" + Category.FOOD}>\n                <CategoryCard category={Category.FOOD}>\n                   <Kitchen/>\n                </CategoryCard>\n            </NavLink>\n            <NavLink to={\"/coupons/category/\" + Category.HYGIENE_PRODUCTS}>\n                <CategoryCard category={Category.HYGIENE_PRODUCTS}>\n                   <Bathtub/>\n                </CategoryCard>\n            </NavLink>\n            <NavLink to={\"/coupons/category/\" + Category.MAGIC}>\n                <CategoryCard category={Category.MAGIC}>\n                   <BlurOn/>\n                </CategoryCard>\n            </NavLink>\n            <NavLink to={\"/coupons/category/\" + Category.RESTAURANT}>\n                <CategoryCard category={Category.RESTAURANT}>\n                   <Fastfood/>\n                </CategoryCard>\n            </NavLink>\n            <NavLink to={\"/coupons/category/\" + Category.TRANSPORT}>\n                <CategoryCard category={Category.TRANSPORT}>\n                   <Commute/>\n                </CategoryCard>\n            </NavLink>\n            <NavLink to={\"/coupons/category/\" + Category.VACATION}>\n                <CategoryCard category={Category.VACATION}>\n                   <CardTravel/>\n                </CategoryCard>\n            </NavLink>\n            </div >\n        );\n   }\n}\n\nexport default Home;\n","import { type } from \"os\";\nimport { Redirect, Route, Switch } from \"react-router\";\nimport { ClientType } from \"../../../Models/UserModel\";\nimport Login from \"../../AuthArea/Login/Login\";\nimport Logout from \"../../AuthArea/Logout/Logout\";\nimport CategoryCoupons from \"../../CouponsArea/CategoryCoupons/CategoryCoupons\";\nimport FullCouponDetails from \"../../CouponsArea/FullCouponDetails/FullCouponDetails\";\nimport AddCompany from \"../../DisplayArea/Admin/AddCompany/AddCompany\";\nimport AddCustomer from \"../../DisplayArea/Admin/AddCustomer/AddCustomer\";\nimport AdminDisplay from \"../../DisplayArea/Admin/AdminDisplay/AdminDisplay\";\nimport DeleteCompany from \"../../DisplayArea/Admin/DeleteCompany/DeleteCompany\";\nimport DeleteCustomer from \"../../DisplayArea/Admin/DeleteCustomer/DeleteCustomer\";\nimport UpdateCompany from \"../../DisplayArea/Admin/UpdateCompany/UpdateCompany\";\nimport UpdateCompanyForm from \"../../DisplayArea/Admin/UpdateCompanyForm/UpdateCompanyForm\";\nimport UpdateCustomer from \"../../DisplayArea/Admin/UpdateCustomer/UpdateCustomer\";\nimport UpdateCustomerForm from \"../../DisplayArea/Admin/UpdateCustomerForm/UpdateCustomerForm\";\nimport AddCoupon from \"../../DisplayArea/Company/AddCoupon/AddCoupon\";\nimport CompanyDisplay from \"../../DisplayArea/Company/CompanyDisplay/CompanyDisplay\";\nimport UpdateCouponForm from \"../../DisplayArea/Company/UpdateCouponForm/UpdateCouponForm\";\nimport CustomerDisplay from \"../../DisplayArea/Customer/CustomerDisplay/CustomerDisplay\";\nimport Page404 from \"../../SharedArea/Page404/Page404\";\nimport Home from \"../Home/Home\";\n\n\n\nfunction Routing(): JSX.Element {\n    return (\n        <div className=\"Routing\">\n            <Switch>\n                <Route path=\"/home\" component={Home} exact/>\n                {/* admin paths */}\n                <Route exact path=\"/administrator/display\" component={AdminDisplay} />\n                \n                <Route exact path=\"/admin/add/company\" component={AddCompany} />\n                <Route exact path=\"/admin/delete/company\" component={DeleteCompany} />\n                <Route exact path=\"/admin/update/company\" component={UpdateCompany} />\n                <Route exact path=\"/admin/update/company/:id\" component={UpdateCompanyForm} />\n\n                <Route exact path=\"/admin/add/customer\" component={AddCustomer} />\n                <Route exact path=\"/admin/update/customer\" component={UpdateCustomer} />\n                <Route exact path=\"/admin/update/customer/:id\" component={UpdateCustomerForm} />\n                <Route exact path=\"/admin/delete/customer\" component={DeleteCustomer} />\n\n                {/* customer paths */}\n                <Route exact path=\"/customer/display\" component={CustomerDisplay} />\n\n                {/* company paths */}\n                <Route exact path=\"/company/display\" component={CompanyDisplay} />\n                <Route exact path=\"/company/add/coupon\" component={AddCoupon} />\n                <Route exact path=\"/company/update/coupon/:id\" component={UpdateCouponForm} />\n\n\n                {/* guest paths */}\n                <Route exact path=\"/coupons/category/:category\" component={CategoryCoupons} />\n                <Route exact path=\"/coupons/full-details/:id\" component={FullCouponDetails} />\n\n                {/* login paths */}\n                <Route exact path=\"/login/customer\" render={(props) => <Login  {...props} type={ClientType.CUSTOMER}/>}/>\n                <Route exact path=\"/login/company\" render={(props) => <Login  {...props} type={ClientType.COMPANY}/>}/>\n                <Route exact path=\"/login/admin\" render={(props) => <Login  {...props} type={ClientType.ADMINISTRATOR}/>}/>\n                <Route exact path=\"/logout\" component={Logout} />\n                <Redirect from=\"/\" to=\"/home\" exact/>\n\n                <Route component={Page404}  />\n            </Switch>\n        </div>\n    );\n}\n\nexport default Routing;\n","import { Component } from \"react\";\nimport Footer from \"../Footer/Footer\";\nimport Header from \"../Header/Header\";\nimport Home from \"../Home/Home\";\nimport Routing from \"../Routing/Routing\";\nimport \"./Layout.css\";\n\nclass Layout extends Component {\n\n    public render(): JSX.Element {\n        return (\n            <div className=\"Layout\">\n                <header> <Header /> </header>\n                <main> <Routing/> </main>\n                <footer> <Footer /> </footer>\n            </div>\n        );\n    }\n}\n\nexport default Layout;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport reportWebVitals from './reportWebVitals';\nimport Layout from './Components/LayoutArea/Layout/Layout';\nimport { BrowserRouter } from 'react-router-dom';\n\nReactDOM.render(\n  <React.StrictMode>\n    <BrowserRouter>\n    <Layout />\n    </BrowserRouter>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\nreportWebVitals();\n"],"sourceRoot":""}